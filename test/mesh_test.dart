import 'dart:ffi';
import 'dart:typed_data';
import 'package:ffi/ffi.dart';
import 'package:test/test.dart';
import '../lib/assimp.dart';
import '../lib/src/bindings.dart';
import 'test_utils.dart';

// DO NOT EDIT (generated by tool/testgen)

void main() {
  prepareTest();

  test('null', () {
    expect(Mesh.fromNative(null), isNull);
  });

  test('size', () {
    expect(sizeOf<aiMesh>(), equals(1312));
  });

  test('size', () {
    final a = Mesh.fromNative(allocate<aiMesh>());
    final b = Mesh.fromNative(allocate<aiMesh>());
    final aa = Mesh.fromNative(a.ptr);
    final bb = Mesh.fromNative(b.ptr);
    expect(a, equals(a));
    expect(a, equals(aa));
    expect(b, equals(b));
    expect(b, equals(bb));
    expect(a, isNot(equals(b)));
    expect(a, isNot(equals(bb)));
    expect(b, isNot(equals(a)));
    expect(b, isNot(equals(aa)));
  });

  test('toString', () {
    expect(Mesh.fromNative(allocate<aiMesh>()).toString(), matches(r'Mesh\(Pointer<aiMesh>: address=0x[0-f]+\)'));
  });

  test('3mf', () {
    testScene('3mf/box.3mf', (scene) {
      final meshes = scene.meshes;
      expect(meshes, isNotEmpty);
      expect(meshes.length, isNonZero);
      final mesh_0 = meshes.elementAt(0);
      expect(mesh_0.primitiveTypes, isZero);
      expect(mesh_0.vertices.length, equals(8));
      expect(mesh_0.normals.length, equals(8));
      expect(mesh_0.tangents.length, equals(8));
      expect(mesh_0.bitangents.length, equals(8));
      expect(mesh_0.colors.length, isZero);
      expect(mesh_0.textureCoords.length, isZero);
      expect(mesh_0.uvComponents.length, isZero);
      expect(mesh_0.faces.length, isZero);
      expect(mesh_0.bones.length, isZero);
      expect(mesh_0.materialIndex, isZero);
      expect(mesh_0.name, isEmpty);
      expect(mesh_0.animMeshes.length, isZero);
      expect(mesh_0.morphingMethod, isZero);
      expect(mesh_0.aabb, aabb3MoreOrLessEquals(Aabb3.minMax(Vector3(0, 0, 0), Vector3(0, 0, 0))));
    });
    testScene('3mf/spider.3mf', (scene) {
      final meshes = scene.meshes;
      expect(meshes, isNotEmpty);
      expect(meshes.length, isNonZero);
      final mesh_0 = meshes.elementAt(0);
      expect(mesh_0.primitiveTypes, equals(4));
      expect(mesh_0.vertices.length, equals(71));
      expect(mesh_0.normals.length, equals(71));
      expect(mesh_0.tangents.length, equals(71));
      expect(mesh_0.bitangents.length, equals(71));
      expect(mesh_0.colors.length, isZero);
      expect(mesh_0.textureCoords.length, isZero);
      expect(mesh_0.uvComponents.length, isZero);
      expect(mesh_0.faces.length, equals(80));
      expect(mesh_0.bones.length, isZero);
      expect(mesh_0.materialIndex, equals(1));
      expect(mesh_0.name, equals('HLeib01'));
      expect(mesh_0.animMeshes.length, isZero);
      expect(mesh_0.morphingMethod, isZero);
      expect(mesh_0.aabb, aabb3MoreOrLessEquals(Aabb3.minMax(Vector3(0, 0, 0), Vector3(0, 0, 0))));

      final mesh_1 = meshes.elementAt(1);
      expect(mesh_1.primitiveTypes, equals(4));
      expect(mesh_1.vertices.length, equals(93));
      expect(mesh_1.normals.length, equals(93));
      expect(mesh_1.tangents.length, equals(93));
      expect(mesh_1.bitangents.length, equals(93));
      expect(mesh_1.colors.length, isZero);
      expect(mesh_1.textureCoords.length, isZero);
      expect(mesh_1.uvComponents.length, isZero);
      expect(mesh_1.faces.length, equals(60));
      expect(mesh_1.bones.length, isZero);
      expect(mesh_1.materialIndex, isZero);
      expect(mesh_1.name, equals('OK'));
      expect(mesh_1.animMeshes.length, isZero);
      expect(mesh_1.morphingMethod, isZero);
      expect(mesh_1.aabb, aabb3MoreOrLessEquals(Aabb3.minMax(Vector3(0, 0, 0), Vector3(0, 0, 0))));

      final mesh_2 = meshes.elementAt(2);
      expect(mesh_2.primitiveTypes, equals(4));
      expect(mesh_2.vertices.length, equals(111));
      expect(mesh_2.normals.length, equals(111));
      expect(mesh_2.tangents.length, equals(111));
      expect(mesh_2.bitangents.length, equals(111));
      expect(mesh_2.colors.length, isZero);
      expect(mesh_2.textureCoords.length, isZero);
      expect(mesh_2.uvComponents.length, isZero);
      expect(mesh_2.faces.length, equals(98));
      expect(mesh_2.bones.length, isZero);
      expect(mesh_2.materialIndex, equals(2));
      expect(mesh_2.name, equals('Bein1Li'));
      expect(mesh_2.animMeshes.length, isZero);
      expect(mesh_2.morphingMethod, isZero);
      expect(mesh_2.aabb, aabb3MoreOrLessEquals(Aabb3.minMax(Vector3(0, 0, 0), Vector3(0, 0, 0))));

      final mesh_3 = meshes.elementAt(3);
      expect(mesh_3.primitiveTypes, equals(4));
      expect(mesh_3.vertices.length, equals(117));
      expect(mesh_3.normals.length, equals(117));
      expect(mesh_3.tangents.length, equals(117));
      expect(mesh_3.bitangents.length, equals(117));
      expect(mesh_3.colors.length, isZero);
      expect(mesh_3.textureCoords.length, isZero);
      expect(mesh_3.uvComponents.length, isZero);
      expect(mesh_3.faces.length, equals(98));
      expect(mesh_3.bones.length, isZero);
      expect(mesh_3.materialIndex, equals(2));
      expect(mesh_3.name, equals('Bein1Re'));
      expect(mesh_3.animMeshes.length, isZero);
      expect(mesh_3.morphingMethod, isZero);
      expect(mesh_3.aabb, aabb3MoreOrLessEquals(Aabb3.minMax(Vector3(0, 0, 0), Vector3(0, 0, 0))));

      final mesh_4 = meshes.elementAt(4);
      expect(mesh_4.primitiveTypes, equals(4));
      expect(mesh_4.vertices.length, equals(113));
      expect(mesh_4.normals.length, equals(113));
      expect(mesh_4.tangents.length, equals(113));
      expect(mesh_4.bitangents.length, equals(113));
      expect(mesh_4.colors.length, isZero);
      expect(mesh_4.textureCoords.length, isZero);
      expect(mesh_4.uvComponents.length, isZero);
      expect(mesh_4.faces.length, equals(98));
      expect(mesh_4.bones.length, isZero);
      expect(mesh_4.materialIndex, equals(2));
      expect(mesh_4.name, equals('Bein2Li'));
      expect(mesh_4.animMeshes.length, isZero);
      expect(mesh_4.morphingMethod, isZero);
      expect(mesh_4.aabb, aabb3MoreOrLessEquals(Aabb3.minMax(Vector3(0, 0, 0), Vector3(0, 0, 0))));

      final mesh_5 = meshes.elementAt(5);
      expect(mesh_5.primitiveTypes, equals(4));
      expect(mesh_5.vertices.length, equals(115));
      expect(mesh_5.normals.length, equals(115));
      expect(mesh_5.tangents.length, equals(115));
      expect(mesh_5.bitangents.length, equals(115));
      expect(mesh_5.colors.length, isZero);
      expect(mesh_5.textureCoords.length, isZero);
      expect(mesh_5.uvComponents.length, isZero);
      expect(mesh_5.faces.length, equals(98));
      expect(mesh_5.bones.length, isZero);
      expect(mesh_5.materialIndex, equals(2));
      expect(mesh_5.name, equals('Bein2Re'));
      expect(mesh_5.animMeshes.length, isZero);
      expect(mesh_5.morphingMethod, isZero);
      expect(mesh_5.aabb, aabb3MoreOrLessEquals(Aabb3.minMax(Vector3(0, 0, 0), Vector3(0, 0, 0))));

      final mesh_6 = meshes.elementAt(6);
      expect(mesh_6.primitiveTypes, equals(4));
      expect(mesh_6.vertices.length, equals(107));
      expect(mesh_6.normals.length, equals(107));
      expect(mesh_6.tangents.length, equals(107));
      expect(mesh_6.bitangents.length, equals(107));
      expect(mesh_6.colors.length, isZero);
      expect(mesh_6.textureCoords.length, isZero);
      expect(mesh_6.uvComponents.length, isZero);
      expect(mesh_6.faces.length, equals(98));
      expect(mesh_6.bones.length, isZero);
      expect(mesh_6.materialIndex, equals(2));
      expect(mesh_6.name, equals('Bein3Re'));
      expect(mesh_6.animMeshes.length, isZero);
      expect(mesh_6.morphingMethod, isZero);
      expect(mesh_6.aabb, aabb3MoreOrLessEquals(Aabb3.minMax(Vector3(0, 0, 0), Vector3(0, 0, 0))));

      final mesh_7 = meshes.elementAt(7);
      expect(mesh_7.primitiveTypes, equals(4));
      expect(mesh_7.vertices.length, equals(107));
      expect(mesh_7.normals.length, equals(107));
      expect(mesh_7.tangents.length, equals(107));
      expect(mesh_7.bitangents.length, equals(107));
      expect(mesh_7.colors.length, isZero);
      expect(mesh_7.textureCoords.length, isZero);
      expect(mesh_7.uvComponents.length, isZero);
      expect(mesh_7.faces.length, equals(98));
      expect(mesh_7.bones.length, isZero);
      expect(mesh_7.materialIndex, equals(2));
      expect(mesh_7.name, equals('Bein3Li'));
      expect(mesh_7.animMeshes.length, isZero);
      expect(mesh_7.morphingMethod, isZero);
      expect(mesh_7.aabb, aabb3MoreOrLessEquals(Aabb3.minMax(Vector3(0, 0, 0), Vector3(0, 0, 0))));

      final mesh_8 = meshes.elementAt(8);
      expect(mesh_8.primitiveTypes, equals(4));
      expect(mesh_8.vertices.length, equals(113));
      expect(mesh_8.normals.length, equals(113));
      expect(mesh_8.tangents.length, equals(113));
      expect(mesh_8.bitangents.length, equals(113));
      expect(mesh_8.colors.length, isZero);
      expect(mesh_8.textureCoords.length, isZero);
      expect(mesh_8.uvComponents.length, isZero);
      expect(mesh_8.faces.length, equals(98));
      expect(mesh_8.bones.length, isZero);
      expect(mesh_8.materialIndex, equals(2));
      expect(mesh_8.name, equals('Bein4Re'));
      expect(mesh_8.animMeshes.length, isZero);
      expect(mesh_8.morphingMethod, isZero);
      expect(mesh_8.aabb, aabb3MoreOrLessEquals(Aabb3.minMax(Vector3(0, 0, 0), Vector3(0, 0, 0))));

      final mesh_9 = meshes.elementAt(9);
      expect(mesh_9.primitiveTypes, equals(4));
      expect(mesh_9.vertices.length, equals(113));
      expect(mesh_9.normals.length, equals(113));
      expect(mesh_9.tangents.length, equals(113));
      expect(mesh_9.bitangents.length, equals(113));
      expect(mesh_9.colors.length, isZero);
      expect(mesh_9.textureCoords.length, isZero);
      expect(mesh_9.uvComponents.length, isZero);
      expect(mesh_9.faces.length, equals(98));
      expect(mesh_9.bones.length, isZero);
      expect(mesh_9.materialIndex, equals(2));
      expect(mesh_9.name, equals('Bein4Li'));
      expect(mesh_9.animMeshes.length, isZero);
      expect(mesh_9.morphingMethod, isZero);
      expect(mesh_9.aabb, aabb3MoreOrLessEquals(Aabb3.minMax(Vector3(0, 0, 0), Vector3(0, 0, 0))));

      final mesh_10 = meshes.elementAt(10);
      expect(mesh_10.primitiveTypes, equals(4));
      expect(mesh_10.vertices.length, equals(42));
      expect(mesh_10.normals.length, equals(42));
      expect(mesh_10.tangents.length, equals(42));
      expect(mesh_10.bitangents.length, equals(42));
      expect(mesh_10.colors.length, isZero);
      expect(mesh_10.textureCoords.length, isZero);
      expect(mesh_10.uvComponents.length, isZero);
      expect(mesh_10.faces.length, equals(42));
      expect(mesh_10.bones.length, isZero);
      expect(mesh_10.materialIndex, equals(2));
      expect(mesh_10.name, equals('Zahn'));
      expect(mesh_10.animMeshes.length, isZero);
      expect(mesh_10.morphingMethod, isZero);
      expect(mesh_10.aabb, aabb3MoreOrLessEquals(Aabb3.minMax(Vector3(0, 0, 0), Vector3(0, 0, 0))));

      final mesh_11 = meshes.elementAt(11);
      expect(mesh_11.primitiveTypes, equals(4));
      expect(mesh_11.vertices.length, equals(44));
      expect(mesh_11.normals.length, equals(44));
      expect(mesh_11.tangents.length, equals(44));
      expect(mesh_11.bitangents.length, equals(44));
      expect(mesh_11.colors.length, isZero);
      expect(mesh_11.textureCoords.length, isZero);
      expect(mesh_11.uvComponents.length, isZero);
      expect(mesh_11.faces.length, equals(42));
      expect(mesh_11.bones.length, isZero);
      expect(mesh_11.materialIndex, equals(2));
      expect(mesh_11.name, equals('klZahn'));
      expect(mesh_11.animMeshes.length, isZero);
      expect(mesh_11.morphingMethod, isZero);
      expect(mesh_11.aabb, aabb3MoreOrLessEquals(Aabb3.minMax(Vector3(0, 0, 0), Vector3(0, 0, 0))));

      final mesh_12 = meshes.elementAt(12);
      expect(mesh_12.primitiveTypes, equals(4));
      expect(mesh_12.vertices.length, equals(79));
      expect(mesh_12.normals.length, equals(79));
      expect(mesh_12.tangents.length, equals(79));
      expect(mesh_12.bitangents.length, equals(79));
      expect(mesh_12.colors.length, isZero);
      expect(mesh_12.textureCoords.length, isZero);
      expect(mesh_12.uvComponents.length, isZero);
      expect(mesh_12.faces.length, equals(90));
      expect(mesh_12.bones.length, isZero);
      expect(mesh_12.materialIndex, isZero);
      expect(mesh_12.name, equals('Kopf'));
      expect(mesh_12.animMeshes.length, isZero);
      expect(mesh_12.morphingMethod, isZero);
      expect(mesh_12.aabb, aabb3MoreOrLessEquals(Aabb3.minMax(Vector3(0, 0, 0), Vector3(0, 0, 0))));

      final mesh_13 = meshes.elementAt(13);
      expect(mesh_13.primitiveTypes, equals(4));
      expect(mesh_13.vertices.length, equals(17));
      expect(mesh_13.normals.length, equals(17));
      expect(mesh_13.tangents.length, equals(17));
      expect(mesh_13.bitangents.length, equals(17));
      expect(mesh_13.colors.length, isZero);
      expect(mesh_13.textureCoords.length, isZero);
      expect(mesh_13.uvComponents.length, isZero);
      expect(mesh_13.faces.length, equals(20));
      expect(mesh_13.bones.length, isZero);
      expect(mesh_13.materialIndex, isZero);
      expect(mesh_13.name, equals('Brust'));
      expect(mesh_13.animMeshes.length, isZero);
      expect(mesh_13.morphingMethod, isZero);
      expect(mesh_13.aabb, aabb3MoreOrLessEquals(Aabb3.minMax(Vector3(0, 0, 0), Vector3(0, 0, 0))));

      final mesh_14 = meshes.elementAt(14);
      expect(mesh_14.primitiveTypes, equals(4));
      expect(mesh_14.vertices.length, equals(79));
      expect(mesh_14.normals.length, equals(79));
      expect(mesh_14.tangents.length, equals(79));
      expect(mesh_14.bitangents.length, equals(79));
      expect(mesh_14.colors.length, isZero);
      expect(mesh_14.textureCoords.length, isZero);
      expect(mesh_14.uvComponents.length, isZero);
      expect(mesh_14.faces.length, equals(90));
      expect(mesh_14.bones.length, isZero);
      expect(mesh_14.materialIndex, isZero);
      expect(mesh_14.name, equals('Kopf2'));
      expect(mesh_14.animMeshes.length, isZero);
      expect(mesh_14.morphingMethod, isZero);
      expect(mesh_14.aabb, aabb3MoreOrLessEquals(Aabb3.minMax(Vector3(0, 0, 0), Vector3(0, 0, 0))));

      final mesh_15 = meshes.elementAt(15);
      expect(mesh_15.primitiveTypes, equals(4));
      expect(mesh_15.vertices.length, equals(42));
      expect(mesh_15.normals.length, equals(42));
      expect(mesh_15.tangents.length, equals(42));
      expect(mesh_15.bitangents.length, equals(42));
      expect(mesh_15.colors.length, isZero);
      expect(mesh_15.textureCoords.length, isZero);
      expect(mesh_15.uvComponents.length, isZero);
      expect(mesh_15.faces.length, equals(42));
      expect(mesh_15.bones.length, isZero);
      expect(mesh_15.materialIndex, equals(2));
      expect(mesh_15.name, equals('Zahn2'));
      expect(mesh_15.animMeshes.length, isZero);
      expect(mesh_15.morphingMethod, isZero);
      expect(mesh_15.aabb, aabb3MoreOrLessEquals(Aabb3.minMax(Vector3(0, 0, 0), Vector3(0, 0, 0))));

      final mesh_16 = meshes.elementAt(16);
      expect(mesh_16.primitiveTypes, equals(4));
      expect(mesh_16.vertices.length, equals(44));
      expect(mesh_16.normals.length, equals(44));
      expect(mesh_16.tangents.length, equals(44));
      expect(mesh_16.bitangents.length, equals(44));
      expect(mesh_16.colors.length, isZero);
      expect(mesh_16.textureCoords.length, isZero);
      expect(mesh_16.uvComponents.length, isZero);
      expect(mesh_16.faces.length, equals(42));
      expect(mesh_16.bones.length, isZero);
      expect(mesh_16.materialIndex, equals(2));
      expect(mesh_16.name, equals('klZahn2'));
      expect(mesh_16.animMeshes.length, isZero);
      expect(mesh_16.morphingMethod, isZero);
      expect(mesh_16.aabb, aabb3MoreOrLessEquals(Aabb3.minMax(Vector3(0, 0, 0), Vector3(0, 0, 0))));

      final mesh_17 = meshes.elementAt(17);
      expect(mesh_17.primitiveTypes, equals(4));
      expect(mesh_17.vertices.length, equals(36));
      expect(mesh_17.normals.length, equals(36));
      expect(mesh_17.tangents.length, equals(36));
      expect(mesh_17.bitangents.length, equals(36));
      expect(mesh_17.colors.length, isZero);
      expect(mesh_17.textureCoords.length, isZero);
      expect(mesh_17.uvComponents.length, isZero);
      expect(mesh_17.faces.length, equals(38));
      expect(mesh_17.bones.length, isZero);
      expect(mesh_17.materialIndex, equals(3));
      expect(mesh_17.name, equals('Auge'));
      expect(mesh_17.animMeshes.length, isZero);
      expect(mesh_17.morphingMethod, isZero);
      expect(mesh_17.aabb, aabb3MoreOrLessEquals(Aabb3.minMax(Vector3(0, 0, 0), Vector3(0, 0, 0))));

      final mesh_18 = meshes.elementAt(18);
      expect(mesh_18.primitiveTypes, equals(4));
      expect(mesh_18.vertices.length, equals(36));
      expect(mesh_18.normals.length, equals(36));
      expect(mesh_18.tangents.length, equals(36));
      expect(mesh_18.bitangents.length, equals(36));
      expect(mesh_18.colors.length, isZero);
      expect(mesh_18.textureCoords.length, isZero);
      expect(mesh_18.uvComponents.length, isZero);
      expect(mesh_18.faces.length, equals(38));
      expect(mesh_18.bones.length, isZero);
      expect(mesh_18.materialIndex, equals(3));
      expect(mesh_18.name, equals('Duplicate05'));
      expect(mesh_18.animMeshes.length, isZero);
      expect(mesh_18.morphingMethod, isZero);
      expect(mesh_18.aabb, aabb3MoreOrLessEquals(Aabb3.minMax(Vector3(0, 0, 0), Vector3(0, 0, 0))));
    });
  });

  test('fbx', () {
    testScene('fbx/huesitos.fbx', (scene) {
      final meshes = scene.meshes;
      expect(meshes, isNotEmpty);
      expect(meshes.length, isNonZero);
      final mesh_0 = meshes.elementAt(0);
      expect(mesh_0.primitiveTypes, equals(12));
      expect(mesh_0.vertices.length, equals(256));
      expect(mesh_0.normals.length, equals(256));
      expect(mesh_0.tangents.length, equals(256));
      expect(mesh_0.bitangents.length, equals(256));
      expect(mesh_0.colors.length, isZero);
      expect(mesh_0.textureCoords.length, equals(1));
      expect(mesh_0.uvComponents.length, equals(1));
      expect(mesh_0.faces.length, equals(68));
      expect(mesh_0.bones.length, equals(9));
      expect(mesh_0.materialIndex, isZero);
      expect(mesh_0.name, equals('Cylinder'));
      expect(mesh_0.animMeshes.length, isZero);
      expect(mesh_0.morphingMethod, isZero);
      expect(mesh_0.aabb, aabb3MoreOrLessEquals(Aabb3.minMax(Vector3(0, 0, 0), Vector3(0, 0, 0))));
    });
  });

  test('obj', () {
    testScene('Obj/Spider/spider.obj', (scene) {
      final meshes = scene.meshes;
      expect(meshes, isNotEmpty);
      expect(meshes.length, isNonZero);
      final mesh_0 = meshes.elementAt(0);
      expect(mesh_0.primitiveTypes, equals(4));
      expect(mesh_0.vertices.length, equals(240));
      expect(mesh_0.normals.length, equals(240));
      expect(mesh_0.tangents.length, equals(240));
      expect(mesh_0.bitangents.length, equals(240));
      expect(mesh_0.colors.length, isZero);
      expect(mesh_0.textureCoords.length, equals(1));
      expect(mesh_0.uvComponents.length, equals(1));
      expect(mesh_0.faces.length, equals(80));
      expect(mesh_0.bones.length, isZero);
      expect(mesh_0.materialIndex, equals(3));
      expect(mesh_0.name, equals('HLeib01'));
      expect(mesh_0.animMeshes.length, isZero);
      expect(mesh_0.morphingMethod, isZero);
      expect(mesh_0.aabb, aabb3MoreOrLessEquals(Aabb3.minMax(Vector3(0, 0, 0), Vector3(0, 0, 0))));

      final mesh_1 = meshes.elementAt(1);
      expect(mesh_1.primitiveTypes, equals(4));
      expect(mesh_1.vertices.length, equals(180));
      expect(mesh_1.normals.length, equals(180));
      expect(mesh_1.tangents.length, equals(180));
      expect(mesh_1.bitangents.length, equals(180));
      expect(mesh_1.colors.length, isZero);
      expect(mesh_1.textureCoords.length, equals(1));
      expect(mesh_1.uvComponents.length, equals(1));
      expect(mesh_1.faces.length, equals(60));
      expect(mesh_1.bones.length, isZero);
      expect(mesh_1.materialIndex, equals(1));
      expect(mesh_1.name, equals('OK'));
      expect(mesh_1.animMeshes.length, isZero);
      expect(mesh_1.morphingMethod, isZero);
      expect(mesh_1.aabb, aabb3MoreOrLessEquals(Aabb3.minMax(Vector3(0, 0, 0), Vector3(0, 0, 0))));

      final mesh_2 = meshes.elementAt(2);
      expect(mesh_2.primitiveTypes, equals(4));
      expect(mesh_2.vertices.length, equals(294));
      expect(mesh_2.normals.length, equals(294));
      expect(mesh_2.tangents.length, equals(294));
      expect(mesh_2.bitangents.length, equals(294));
      expect(mesh_2.colors.length, isZero);
      expect(mesh_2.textureCoords.length, equals(1));
      expect(mesh_2.uvComponents.length, equals(1));
      expect(mesh_2.faces.length, equals(98));
      expect(mesh_2.bones.length, isZero);
      expect(mesh_2.materialIndex, equals(4));
      expect(mesh_2.name, equals('Bein1Li'));
      expect(mesh_2.animMeshes.length, isZero);
      expect(mesh_2.morphingMethod, isZero);
      expect(mesh_2.aabb, aabb3MoreOrLessEquals(Aabb3.minMax(Vector3(0, 0, 0), Vector3(0, 0, 0))));

      final mesh_3 = meshes.elementAt(3);
      expect(mesh_3.primitiveTypes, equals(4));
      expect(mesh_3.vertices.length, equals(294));
      expect(mesh_3.normals.length, equals(294));
      expect(mesh_3.tangents.length, equals(294));
      expect(mesh_3.bitangents.length, equals(294));
      expect(mesh_3.colors.length, isZero);
      expect(mesh_3.textureCoords.length, equals(1));
      expect(mesh_3.uvComponents.length, equals(1));
      expect(mesh_3.faces.length, equals(98));
      expect(mesh_3.bones.length, isZero);
      expect(mesh_3.materialIndex, equals(4));
      expect(mesh_3.name, equals('Bein1Re'));
      expect(mesh_3.animMeshes.length, isZero);
      expect(mesh_3.morphingMethod, isZero);
      expect(mesh_3.aabb, aabb3MoreOrLessEquals(Aabb3.minMax(Vector3(0, 0, 0), Vector3(0, 0, 0))));

      final mesh_4 = meshes.elementAt(4);
      expect(mesh_4.primitiveTypes, equals(4));
      expect(mesh_4.vertices.length, equals(294));
      expect(mesh_4.normals.length, equals(294));
      expect(mesh_4.tangents.length, equals(294));
      expect(mesh_4.bitangents.length, equals(294));
      expect(mesh_4.colors.length, isZero);
      expect(mesh_4.textureCoords.length, equals(1));
      expect(mesh_4.uvComponents.length, equals(1));
      expect(mesh_4.faces.length, equals(98));
      expect(mesh_4.bones.length, isZero);
      expect(mesh_4.materialIndex, equals(4));
      expect(mesh_4.name, equals('Bein2Li'));
      expect(mesh_4.animMeshes.length, isZero);
      expect(mesh_4.morphingMethod, isZero);
      expect(mesh_4.aabb, aabb3MoreOrLessEquals(Aabb3.minMax(Vector3(0, 0, 0), Vector3(0, 0, 0))));

      final mesh_5 = meshes.elementAt(5);
      expect(mesh_5.primitiveTypes, equals(4));
      expect(mesh_5.vertices.length, equals(294));
      expect(mesh_5.normals.length, equals(294));
      expect(mesh_5.tangents.length, equals(294));
      expect(mesh_5.bitangents.length, equals(294));
      expect(mesh_5.colors.length, isZero);
      expect(mesh_5.textureCoords.length, equals(1));
      expect(mesh_5.uvComponents.length, equals(1));
      expect(mesh_5.faces.length, equals(98));
      expect(mesh_5.bones.length, isZero);
      expect(mesh_5.materialIndex, equals(4));
      expect(mesh_5.name, equals('Bein2Re'));
      expect(mesh_5.animMeshes.length, isZero);
      expect(mesh_5.morphingMethod, isZero);
      expect(mesh_5.aabb, aabb3MoreOrLessEquals(Aabb3.minMax(Vector3(0, 0, 0), Vector3(0, 0, 0))));

      final mesh_6 = meshes.elementAt(6);
      expect(mesh_6.primitiveTypes, equals(4));
      expect(mesh_6.vertices.length, equals(294));
      expect(mesh_6.normals.length, equals(294));
      expect(mesh_6.tangents.length, equals(294));
      expect(mesh_6.bitangents.length, equals(294));
      expect(mesh_6.colors.length, isZero);
      expect(mesh_6.textureCoords.length, equals(1));
      expect(mesh_6.uvComponents.length, equals(1));
      expect(mesh_6.faces.length, equals(98));
      expect(mesh_6.bones.length, isZero);
      expect(mesh_6.materialIndex, equals(4));
      expect(mesh_6.name, equals('Bein3Re'));
      expect(mesh_6.animMeshes.length, isZero);
      expect(mesh_6.morphingMethod, isZero);
      expect(mesh_6.aabb, aabb3MoreOrLessEquals(Aabb3.minMax(Vector3(0, 0, 0), Vector3(0, 0, 0))));

      final mesh_7 = meshes.elementAt(7);
      expect(mesh_7.primitiveTypes, equals(4));
      expect(mesh_7.vertices.length, equals(294));
      expect(mesh_7.normals.length, equals(294));
      expect(mesh_7.tangents.length, equals(294));
      expect(mesh_7.bitangents.length, equals(294));
      expect(mesh_7.colors.length, isZero);
      expect(mesh_7.textureCoords.length, equals(1));
      expect(mesh_7.uvComponents.length, equals(1));
      expect(mesh_7.faces.length, equals(98));
      expect(mesh_7.bones.length, isZero);
      expect(mesh_7.materialIndex, equals(4));
      expect(mesh_7.name, equals('Bein3Li'));
      expect(mesh_7.animMeshes.length, isZero);
      expect(mesh_7.morphingMethod, isZero);
      expect(mesh_7.aabb, aabb3MoreOrLessEquals(Aabb3.minMax(Vector3(0, 0, 0), Vector3(0, 0, 0))));

      final mesh_8 = meshes.elementAt(8);
      expect(mesh_8.primitiveTypes, equals(4));
      expect(mesh_8.vertices.length, equals(294));
      expect(mesh_8.normals.length, equals(294));
      expect(mesh_8.tangents.length, equals(294));
      expect(mesh_8.bitangents.length, equals(294));
      expect(mesh_8.colors.length, isZero);
      expect(mesh_8.textureCoords.length, equals(1));
      expect(mesh_8.uvComponents.length, equals(1));
      expect(mesh_8.faces.length, equals(98));
      expect(mesh_8.bones.length, isZero);
      expect(mesh_8.materialIndex, equals(4));
      expect(mesh_8.name, equals('Bein4Re'));
      expect(mesh_8.animMeshes.length, isZero);
      expect(mesh_8.morphingMethod, isZero);
      expect(mesh_8.aabb, aabb3MoreOrLessEquals(Aabb3.minMax(Vector3(0, 0, 0), Vector3(0, 0, 0))));

      final mesh_9 = meshes.elementAt(9);
      expect(mesh_9.primitiveTypes, equals(4));
      expect(mesh_9.vertices.length, equals(294));
      expect(mesh_9.normals.length, equals(294));
      expect(mesh_9.tangents.length, equals(294));
      expect(mesh_9.bitangents.length, equals(294));
      expect(mesh_9.colors.length, isZero);
      expect(mesh_9.textureCoords.length, equals(1));
      expect(mesh_9.uvComponents.length, equals(1));
      expect(mesh_9.faces.length, equals(98));
      expect(mesh_9.bones.length, isZero);
      expect(mesh_9.materialIndex, equals(4));
      expect(mesh_9.name, equals('Bein4Li'));
      expect(mesh_9.animMeshes.length, isZero);
      expect(mesh_9.morphingMethod, isZero);
      expect(mesh_9.aabb, aabb3MoreOrLessEquals(Aabb3.minMax(Vector3(0, 0, 0), Vector3(0, 0, 0))));

      final mesh_10 = meshes.elementAt(10);
      expect(mesh_10.primitiveTypes, equals(4));
      expect(mesh_10.vertices.length, equals(126));
      expect(mesh_10.normals.length, equals(126));
      expect(mesh_10.tangents.length, equals(126));
      expect(mesh_10.bitangents.length, equals(126));
      expect(mesh_10.colors.length, isZero);
      expect(mesh_10.textureCoords.length, equals(1));
      expect(mesh_10.uvComponents.length, equals(1));
      expect(mesh_10.faces.length, equals(42));
      expect(mesh_10.bones.length, isZero);
      expect(mesh_10.materialIndex, equals(4));
      expect(mesh_10.name, equals('Zahn'));
      expect(mesh_10.animMeshes.length, isZero);
      expect(mesh_10.morphingMethod, isZero);
      expect(mesh_10.aabb, aabb3MoreOrLessEquals(Aabb3.minMax(Vector3(0, 0, 0), Vector3(0, 0, 0))));

      final mesh_11 = meshes.elementAt(11);
      expect(mesh_11.primitiveTypes, equals(4));
      expect(mesh_11.vertices.length, equals(126));
      expect(mesh_11.normals.length, equals(126));
      expect(mesh_11.tangents.length, equals(126));
      expect(mesh_11.bitangents.length, equals(126));
      expect(mesh_11.colors.length, isZero);
      expect(mesh_11.textureCoords.length, equals(1));
      expect(mesh_11.uvComponents.length, equals(1));
      expect(mesh_11.faces.length, equals(42));
      expect(mesh_11.bones.length, isZero);
      expect(mesh_11.materialIndex, equals(4));
      expect(mesh_11.name, equals('klZahn'));
      expect(mesh_11.animMeshes.length, isZero);
      expect(mesh_11.morphingMethod, isZero);
      expect(mesh_11.aabb, aabb3MoreOrLessEquals(Aabb3.minMax(Vector3(0, 0, 0), Vector3(0, 0, 0))));

      final mesh_12 = meshes.elementAt(12);
      expect(mesh_12.primitiveTypes, equals(4));
      expect(mesh_12.vertices.length, equals(270));
      expect(mesh_12.normals.length, equals(270));
      expect(mesh_12.tangents.length, equals(270));
      expect(mesh_12.bitangents.length, equals(270));
      expect(mesh_12.colors.length, isZero);
      expect(mesh_12.textureCoords.length, equals(1));
      expect(mesh_12.uvComponents.length, equals(1));
      expect(mesh_12.faces.length, equals(90));
      expect(mesh_12.bones.length, isZero);
      expect(mesh_12.materialIndex, equals(1));
      expect(mesh_12.name, equals('Kopf'));
      expect(mesh_12.animMeshes.length, isZero);
      expect(mesh_12.morphingMethod, isZero);
      expect(mesh_12.aabb, aabb3MoreOrLessEquals(Aabb3.minMax(Vector3(0, 0, 0), Vector3(0, 0, 0))));

      final mesh_13 = meshes.elementAt(13);
      expect(mesh_13.primitiveTypes, equals(4));
      expect(mesh_13.vertices.length, equals(60));
      expect(mesh_13.normals.length, equals(60));
      expect(mesh_13.tangents.length, equals(60));
      expect(mesh_13.bitangents.length, equals(60));
      expect(mesh_13.colors.length, isZero);
      expect(mesh_13.textureCoords.length, equals(1));
      expect(mesh_13.uvComponents.length, equals(1));
      expect(mesh_13.faces.length, equals(20));
      expect(mesh_13.bones.length, isZero);
      expect(mesh_13.materialIndex, equals(1));
      expect(mesh_13.name, equals('Brust'));
      expect(mesh_13.animMeshes.length, isZero);
      expect(mesh_13.morphingMethod, isZero);
      expect(mesh_13.aabb, aabb3MoreOrLessEquals(Aabb3.minMax(Vector3(0, 0, 0), Vector3(0, 0, 0))));

      final mesh_14 = meshes.elementAt(14);
      expect(mesh_14.primitiveTypes, equals(4));
      expect(mesh_14.vertices.length, equals(270));
      expect(mesh_14.normals.length, equals(270));
      expect(mesh_14.tangents.length, equals(270));
      expect(mesh_14.bitangents.length, equals(270));
      expect(mesh_14.colors.length, isZero);
      expect(mesh_14.textureCoords.length, equals(1));
      expect(mesh_14.uvComponents.length, equals(1));
      expect(mesh_14.faces.length, equals(90));
      expect(mesh_14.bones.length, isZero);
      expect(mesh_14.materialIndex, equals(1));
      expect(mesh_14.name, equals('Kopf2'));
      expect(mesh_14.animMeshes.length, isZero);
      expect(mesh_14.morphingMethod, isZero);
      expect(mesh_14.aabb, aabb3MoreOrLessEquals(Aabb3.minMax(Vector3(0, 0, 0), Vector3(0, 0, 0))));

      final mesh_15 = meshes.elementAt(15);
      expect(mesh_15.primitiveTypes, equals(4));
      expect(mesh_15.vertices.length, equals(126));
      expect(mesh_15.normals.length, equals(126));
      expect(mesh_15.tangents.length, equals(126));
      expect(mesh_15.bitangents.length, equals(126));
      expect(mesh_15.colors.length, isZero);
      expect(mesh_15.textureCoords.length, equals(1));
      expect(mesh_15.uvComponents.length, equals(1));
      expect(mesh_15.faces.length, equals(42));
      expect(mesh_15.bones.length, isZero);
      expect(mesh_15.materialIndex, equals(4));
      expect(mesh_15.name, equals('Zahn2'));
      expect(mesh_15.animMeshes.length, isZero);
      expect(mesh_15.morphingMethod, isZero);
      expect(mesh_15.aabb, aabb3MoreOrLessEquals(Aabb3.minMax(Vector3(0, 0, 0), Vector3(0, 0, 0))));

      final mesh_16 = meshes.elementAt(16);
      expect(mesh_16.primitiveTypes, equals(4));
      expect(mesh_16.vertices.length, equals(126));
      expect(mesh_16.normals.length, equals(126));
      expect(mesh_16.tangents.length, equals(126));
      expect(mesh_16.bitangents.length, equals(126));
      expect(mesh_16.colors.length, isZero);
      expect(mesh_16.textureCoords.length, equals(1));
      expect(mesh_16.uvComponents.length, equals(1));
      expect(mesh_16.faces.length, equals(42));
      expect(mesh_16.bones.length, isZero);
      expect(mesh_16.materialIndex, equals(4));
      expect(mesh_16.name, equals('klZahn2'));
      expect(mesh_16.animMeshes.length, isZero);
      expect(mesh_16.morphingMethod, isZero);
      expect(mesh_16.aabb, aabb3MoreOrLessEquals(Aabb3.minMax(Vector3(0, 0, 0), Vector3(0, 0, 0))));

      final mesh_17 = meshes.elementAt(17);
      expect(mesh_17.primitiveTypes, equals(4));
      expect(mesh_17.vertices.length, equals(114));
      expect(mesh_17.normals.length, equals(114));
      expect(mesh_17.tangents.length, equals(114));
      expect(mesh_17.bitangents.length, equals(114));
      expect(mesh_17.colors.length, isZero);
      expect(mesh_17.textureCoords.length, equals(1));
      expect(mesh_17.uvComponents.length, equals(1));
      expect(mesh_17.faces.length, equals(38));
      expect(mesh_17.bones.length, isZero);
      expect(mesh_17.materialIndex, equals(5));
      expect(mesh_17.name, equals('Auge'));
      expect(mesh_17.animMeshes.length, isZero);
      expect(mesh_17.morphingMethod, isZero);
      expect(mesh_17.aabb, aabb3MoreOrLessEquals(Aabb3.minMax(Vector3(0, 0, 0), Vector3(0, 0, 0))));

      final mesh_18 = meshes.elementAt(18);
      expect(mesh_18.primitiveTypes, equals(4));
      expect(mesh_18.vertices.length, equals(114));
      expect(mesh_18.normals.length, equals(114));
      expect(mesh_18.tangents.length, equals(114));
      expect(mesh_18.bitangents.length, equals(114));
      expect(mesh_18.colors.length, isZero);
      expect(mesh_18.textureCoords.length, equals(1));
      expect(mesh_18.uvComponents.length, equals(1));
      expect(mesh_18.faces.length, equals(38));
      expect(mesh_18.bones.length, isZero);
      expect(mesh_18.materialIndex, equals(5));
      expect(mesh_18.name, equals('Duplicate05'));
      expect(mesh_18.animMeshes.length, isZero);
      expect(mesh_18.morphingMethod, isZero);
      expect(mesh_18.aabb, aabb3MoreOrLessEquals(Aabb3.minMax(Vector3(0, 0, 0), Vector3(0, 0, 0))));
    });
  });

}
