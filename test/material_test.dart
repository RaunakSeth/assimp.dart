import 'dart:ffi';
import 'dart:typed_data';
import 'package:ffi/ffi.dart';
import 'package:test/test.dart';
import 'package:assimp/assimp.dart';
import '../lib/src/bindings.dart';
import 'test_utils.dart';

// DO NOT EDIT (generated by tool/testgen)

void main() {
  prepareTest();

  test('null', () {
    expect(Material.fromNative(null), isNull);
  });

  test('size', () {
    expect(sizeOf<aiMaterial>(), equals(16));
  });

  test('3mf', () {
    testMaterials('3mf/box.3mf', (materials) {
      expect(materials.length, equals(1));
      expect(materials.elementAt(0).properties.length, equals(2));
        expect(materials.elementAt(0).properties.elementAt(0).key, equals('\$clr.diffuse'));
        expect(materials.elementAt(0).properties.elementAt(0).value.runtimeType, double);
        expect(materials.elementAt(0).properties.elementAt(0).value, moreOrLessEquals(0.6));
        expect(materials.elementAt(0).properties.elementAt(0).index, isZero);
        expect(materials.elementAt(0).properties.elementAt(0).semantic, isZero);
        expect(materials.elementAt(0).properties.elementAt(1).key, equals('?mat.name'));
        expect(materials.elementAt(0).properties.elementAt(1).value.runtimeType, String);
        expect(materials.elementAt(0).properties.elementAt(1).value, equals('DefaultMaterial'));
        expect(materials.elementAt(0).properties.elementAt(1).index, isZero);
        expect(materials.elementAt(0).properties.elementAt(1).semantic, isZero);
    });
    testMaterials('3mf/spider.3mf', (materials) {
      expect(materials.length, equals(4));
      expect(materials.elementAt(0).properties.length, equals(1));
        expect(materials.elementAt(0).properties.elementAt(0).key, equals('?mat.name'));
        expect(materials.elementAt(0).properties.elementAt(0).value.runtimeType, String);
        expect(materials.elementAt(0).properties.elementAt(0).value, equals('id1_Skin'));
        expect(materials.elementAt(0).properties.elementAt(0).index, isZero);
        expect(materials.elementAt(0).properties.elementAt(0).semantic, isZero);

      expect(materials.elementAt(1).properties.length, equals(1));
        expect(materials.elementAt(1).properties.elementAt(0).key, equals('?mat.name'));
        expect(materials.elementAt(1).properties.elementAt(0).value.runtimeType, String);
        expect(materials.elementAt(1).properties.elementAt(0).value, equals('id1_HLeibTex'));
        expect(materials.elementAt(1).properties.elementAt(0).index, isZero);
        expect(materials.elementAt(1).properties.elementAt(0).semantic, isZero);

      expect(materials.elementAt(2).properties.length, equals(1));
        expect(materials.elementAt(2).properties.elementAt(0).key, equals('?mat.name'));
        expect(materials.elementAt(2).properties.elementAt(0).value.runtimeType, String);
        expect(materials.elementAt(2).properties.elementAt(0).value, equals('id1_BeinTex'));
        expect(materials.elementAt(2).properties.elementAt(0).index, isZero);
        expect(materials.elementAt(2).properties.elementAt(0).semantic, isZero);

      expect(materials.elementAt(3).properties.length, equals(1));
        expect(materials.elementAt(3).properties.elementAt(0).key, equals('?mat.name'));
        expect(materials.elementAt(3).properties.elementAt(0).value.runtimeType, String);
        expect(materials.elementAt(3).properties.elementAt(0).value, equals('id1_Augentex'));
        expect(materials.elementAt(3).properties.elementAt(0).index, isZero);
        expect(materials.elementAt(3).properties.elementAt(0).semantic, isZero);
    });
  });

  test('fbx', () {
    testMaterials('fbx/huesitos.fbx', (materials) {
      expect(materials.length, equals(1));
      expect(materials.elementAt(0).properties.length, equals(16));
        expect(materials.elementAt(0).properties.elementAt(0).key, equals('?mat.name'));
        expect(materials.elementAt(0).properties.elementAt(0).value.runtimeType, String);
        expect(materials.elementAt(0).properties.elementAt(0).value, equals('Material.001'));
        expect(materials.elementAt(0).properties.elementAt(0).index, isZero);
        expect(materials.elementAt(0).properties.elementAt(0).semantic, isZero);
        expect(materials.elementAt(0).properties.elementAt(1).key, equals('\$mat.shadingm'));
        expect(materials.elementAt(0).properties.elementAt(1).value.runtimeType.toString(), 'Uint8List');
        expect(materials.elementAt(0).properties.elementAt(1).value, equals([3, 0, 0, 0]));
        expect(materials.elementAt(0).properties.elementAt(1).index, isZero);
        expect(materials.elementAt(0).properties.elementAt(1).semantic, isZero);
        expect(materials.elementAt(0).properties.elementAt(2).key, equals('\$clr.diffuse'));
        expect(materials.elementAt(0).properties.elementAt(2).value.runtimeType, double);
        expect(materials.elementAt(0).properties.elementAt(2).value, moreOrLessEquals(0.411205));
        expect(materials.elementAt(0).properties.elementAt(2).index, isZero);
        expect(materials.elementAt(0).properties.elementAt(2).semantic, isZero);
        expect(materials.elementAt(0).properties.elementAt(3).key, equals('\$clr.emissive'));
        expect(materials.elementAt(0).properties.elementAt(3).value.runtimeType, double);
        expect(materials.elementAt(0).properties.elementAt(3).value, isZero);
        expect(materials.elementAt(0).properties.elementAt(3).index, isZero);
        expect(materials.elementAt(0).properties.elementAt(3).semantic, isZero);
        expect(materials.elementAt(0).properties.elementAt(4).key, equals('\$clr.ambient'));
        expect(materials.elementAt(0).properties.elementAt(4).value.runtimeType, double);
        expect(materials.elementAt(0).properties.elementAt(4).value, isZero);
        expect(materials.elementAt(0).properties.elementAt(4).index, isZero);
        expect(materials.elementAt(0).properties.elementAt(4).semantic, isZero);
        expect(materials.elementAt(0).properties.elementAt(5).key, equals('\$clr.specular'));
        expect(materials.elementAt(0).properties.elementAt(5).value.runtimeType, double);
        expect(materials.elementAt(0).properties.elementAt(5).value, moreOrLessEquals(0.848257));
        expect(materials.elementAt(0).properties.elementAt(5).index, isZero);
        expect(materials.elementAt(0).properties.elementAt(5).semantic, isZero);
        expect(materials.elementAt(0).properties.elementAt(6).key, equals('\$mat.shinpercent'));
        expect(materials.elementAt(0).properties.elementAt(6).value.runtimeType, double);
        expect(materials.elementAt(0).properties.elementAt(6).value, moreOrLessEquals(0.5));
        expect(materials.elementAt(0).properties.elementAt(6).index, isZero);
        expect(materials.elementAt(0).properties.elementAt(6).semantic, isZero);
        expect(materials.elementAt(0).properties.elementAt(7).key, equals('\$mat.shininess'));
        expect(materials.elementAt(0).properties.elementAt(7).value.runtimeType, double);
        expect(materials.elementAt(0).properties.elementAt(7).value, moreOrLessEquals(9.60784));
        expect(materials.elementAt(0).properties.elementAt(7).index, isZero);
        expect(materials.elementAt(0).properties.elementAt(7).semantic, isZero);
        expect(materials.elementAt(0).properties.elementAt(8).key, equals('\$clr.transparent'));
        expect(materials.elementAt(0).properties.elementAt(8).value.runtimeType, double);
        expect(materials.elementAt(0).properties.elementAt(8).value, isZero);
        expect(materials.elementAt(0).properties.elementAt(8).index, isZero);
        expect(materials.elementAt(0).properties.elementAt(8).semantic, isZero);
        expect(materials.elementAt(0).properties.elementAt(9).key, equals('\$mat.transparencyfactor'));
        expect(materials.elementAt(0).properties.elementAt(9).value.runtimeType, double);
        expect(materials.elementAt(0).properties.elementAt(9).value, isZero);
        expect(materials.elementAt(0).properties.elementAt(9).index, isZero);
        expect(materials.elementAt(0).properties.elementAt(9).semantic, isZero);
        expect(materials.elementAt(0).properties.elementAt(10).key, equals('\$mat.opacity'));
        expect(materials.elementAt(0).properties.elementAt(10).value.runtimeType, double);
        expect(materials.elementAt(0).properties.elementAt(10).value, moreOrLessEquals(1));
        expect(materials.elementAt(0).properties.elementAt(10).index, isZero);
        expect(materials.elementAt(0).properties.elementAt(10).semantic, isZero);
        expect(materials.elementAt(0).properties.elementAt(11).key, equals('\$clr.reflective'));
        expect(materials.elementAt(0).properties.elementAt(11).value.runtimeType, double);
        expect(materials.elementAt(0).properties.elementAt(11).value, moreOrLessEquals(1));
        expect(materials.elementAt(0).properties.elementAt(11).index, isZero);
        expect(materials.elementAt(0).properties.elementAt(11).semantic, isZero);
        expect(materials.elementAt(0).properties.elementAt(12).key, equals('\$mat.reflectivity'));
        expect(materials.elementAt(0).properties.elementAt(12).value.runtimeType, double);
        expect(materials.elementAt(0).properties.elementAt(12).value, isZero);
        expect(materials.elementAt(0).properties.elementAt(12).index, isZero);
        expect(materials.elementAt(0).properties.elementAt(12).semantic, isZero);
        expect(materials.elementAt(0).properties.elementAt(13).key, equals('\$mat.bumpscaling'));
        expect(materials.elementAt(0).properties.elementAt(13).value.runtimeType, double);
        expect(materials.elementAt(0).properties.elementAt(13).value, moreOrLessEquals(1));
        expect(materials.elementAt(0).properties.elementAt(13).index, isZero);
        expect(materials.elementAt(0).properties.elementAt(13).semantic, isZero);
        expect(materials.elementAt(0).properties.elementAt(14).key, equals('\$mat.displacementscaling'));
        expect(materials.elementAt(0).properties.elementAt(14).value.runtimeType, double);
        expect(materials.elementAt(0).properties.elementAt(14).value, moreOrLessEquals(1));
        expect(materials.elementAt(0).properties.elementAt(14).index, isZero);
        expect(materials.elementAt(0).properties.elementAt(14).semantic, isZero);
        expect(materials.elementAt(0).properties.elementAt(15).key, equals('\$raw.Shininess'));
        expect(materials.elementAt(0).properties.elementAt(15).value.runtimeType, double);
        expect(materials.elementAt(0).properties.elementAt(15).value, moreOrLessEquals(9.60784));
        expect(materials.elementAt(0).properties.elementAt(15).index, isZero);
        expect(materials.elementAt(0).properties.elementAt(15).semantic, isZero);
    });
  });

  test('obj', () {
    testMaterials('Obj/Spider/spider.obj', (materials) {
      expect(materials.length, equals(6));
      expect(materials.elementAt(0).properties.length, equals(10));
        expect(materials.elementAt(0).properties.elementAt(0).key, equals('?mat.name'));
        expect(materials.elementAt(0).properties.elementAt(0).value.runtimeType, String);
        expect(materials.elementAt(0).properties.elementAt(0).value, equals('DefaultMaterial'));
        expect(materials.elementAt(0).properties.elementAt(0).index, isZero);
        expect(materials.elementAt(0).properties.elementAt(0).semantic, isZero);
        expect(materials.elementAt(0).properties.elementAt(1).key, equals('\$mat.shadingm'));
        expect(materials.elementAt(0).properties.elementAt(1).value.runtimeType, int);
        expect(materials.elementAt(0).properties.elementAt(1).value, equals(2));
        expect(materials.elementAt(0).properties.elementAt(1).index, isZero);
        expect(materials.elementAt(0).properties.elementAt(1).semantic, isZero);
        expect(materials.elementAt(0).properties.elementAt(2).key, equals('\$clr.ambient'));
        expect(materials.elementAt(0).properties.elementAt(2).value.runtimeType, double);
        expect(materials.elementAt(0).properties.elementAt(2).value, isZero);
        expect(materials.elementAt(0).properties.elementAt(2).index, isZero);
        expect(materials.elementAt(0).properties.elementAt(2).semantic, isZero);
        expect(materials.elementAt(0).properties.elementAt(3).key, equals('\$clr.diffuse'));
        expect(materials.elementAt(0).properties.elementAt(3).value.runtimeType, double);
        expect(materials.elementAt(0).properties.elementAt(3).value, moreOrLessEquals(0.6));
        expect(materials.elementAt(0).properties.elementAt(3).index, isZero);
        expect(materials.elementAt(0).properties.elementAt(3).semantic, isZero);
        expect(materials.elementAt(0).properties.elementAt(4).key, equals('\$clr.specular'));
        expect(materials.elementAt(0).properties.elementAt(4).value.runtimeType, double);
        expect(materials.elementAt(0).properties.elementAt(4).value, isZero);
        expect(materials.elementAt(0).properties.elementAt(4).index, isZero);
        expect(materials.elementAt(0).properties.elementAt(4).semantic, isZero);
        expect(materials.elementAt(0).properties.elementAt(5).key, equals('\$clr.emissive'));
        expect(materials.elementAt(0).properties.elementAt(5).value.runtimeType, double);
        expect(materials.elementAt(0).properties.elementAt(5).value, isZero);
        expect(materials.elementAt(0).properties.elementAt(5).index, isZero);
        expect(materials.elementAt(0).properties.elementAt(5).semantic, isZero);
        expect(materials.elementAt(0).properties.elementAt(6).key, equals('\$mat.shininess'));
        expect(materials.elementAt(0).properties.elementAt(6).value.runtimeType, double);
        expect(materials.elementAt(0).properties.elementAt(6).value, isZero);
        expect(materials.elementAt(0).properties.elementAt(6).index, isZero);
        expect(materials.elementAt(0).properties.elementAt(6).semantic, isZero);
        expect(materials.elementAt(0).properties.elementAt(7).key, equals('\$mat.opacity'));
        expect(materials.elementAt(0).properties.elementAt(7).value.runtimeType, double);
        expect(materials.elementAt(0).properties.elementAt(7).value, moreOrLessEquals(1));
        expect(materials.elementAt(0).properties.elementAt(7).index, isZero);
        expect(materials.elementAt(0).properties.elementAt(7).semantic, isZero);
        expect(materials.elementAt(0).properties.elementAt(8).key, equals('\$clr.transparent'));
        expect(materials.elementAt(0).properties.elementAt(8).value.runtimeType, double);
        expect(materials.elementAt(0).properties.elementAt(8).value, moreOrLessEquals(1));
        expect(materials.elementAt(0).properties.elementAt(8).index, isZero);
        expect(materials.elementAt(0).properties.elementAt(8).semantic, isZero);
        expect(materials.elementAt(0).properties.elementAt(9).key, equals('\$mat.refracti'));
        expect(materials.elementAt(0).properties.elementAt(9).value.runtimeType, double);
        expect(materials.elementAt(0).properties.elementAt(9).value, moreOrLessEquals(1));
        expect(materials.elementAt(0).properties.elementAt(9).index, isZero);
        expect(materials.elementAt(0).properties.elementAt(9).semantic, isZero);

      expect(materials.elementAt(1).properties.length, equals(12));
        expect(materials.elementAt(1).properties.elementAt(0).key, equals('?mat.name'));
        expect(materials.elementAt(1).properties.elementAt(0).value.runtimeType, String);
        expect(materials.elementAt(1).properties.elementAt(0).value, equals('Skin'));
        expect(materials.elementAt(1).properties.elementAt(0).index, isZero);
        expect(materials.elementAt(1).properties.elementAt(0).semantic, isZero);
        expect(materials.elementAt(1).properties.elementAt(1).key, equals('\$mat.shadingm'));
        expect(materials.elementAt(1).properties.elementAt(1).value.runtimeType, int);
        expect(materials.elementAt(1).properties.elementAt(1).value, equals(2));
        expect(materials.elementAt(1).properties.elementAt(1).index, isZero);
        expect(materials.elementAt(1).properties.elementAt(1).semantic, isZero);
        expect(materials.elementAt(1).properties.elementAt(2).key, equals('\$clr.ambient'));
        expect(materials.elementAt(1).properties.elementAt(2).value.runtimeType, double);
        expect(materials.elementAt(1).properties.elementAt(2).value, moreOrLessEquals(0.2));
        expect(materials.elementAt(1).properties.elementAt(2).index, isZero);
        expect(materials.elementAt(1).properties.elementAt(2).semantic, isZero);
        expect(materials.elementAt(1).properties.elementAt(3).key, equals('\$clr.diffuse'));
        expect(materials.elementAt(1).properties.elementAt(3).value.runtimeType, double);
        expect(materials.elementAt(1).properties.elementAt(3).value, moreOrLessEquals(0.827451));
        expect(materials.elementAt(1).properties.elementAt(3).index, isZero);
        expect(materials.elementAt(1).properties.elementAt(3).semantic, isZero);
        expect(materials.elementAt(1).properties.elementAt(4).key, equals('\$clr.specular'));
        expect(materials.elementAt(1).properties.elementAt(4).value.runtimeType, double);
        expect(materials.elementAt(1).properties.elementAt(4).value, isZero);
        expect(materials.elementAt(1).properties.elementAt(4).index, isZero);
        expect(materials.elementAt(1).properties.elementAt(4).semantic, isZero);
        expect(materials.elementAt(1).properties.elementAt(5).key, equals('\$clr.emissive'));
        expect(materials.elementAt(1).properties.elementAt(5).value.runtimeType, double);
        expect(materials.elementAt(1).properties.elementAt(5).value, isZero);
        expect(materials.elementAt(1).properties.elementAt(5).index, isZero);
        expect(materials.elementAt(1).properties.elementAt(5).semantic, isZero);
        expect(materials.elementAt(1).properties.elementAt(6).key, equals('\$mat.shininess'));
        expect(materials.elementAt(1).properties.elementAt(6).value.runtimeType, double);
        expect(materials.elementAt(1).properties.elementAt(6).value, isZero);
        expect(materials.elementAt(1).properties.elementAt(6).index, isZero);
        expect(materials.elementAt(1).properties.elementAt(6).semantic, isZero);
        expect(materials.elementAt(1).properties.elementAt(7).key, equals('\$mat.opacity'));
        expect(materials.elementAt(1).properties.elementAt(7).value.runtimeType, double);
        expect(materials.elementAt(1).properties.elementAt(7).value, moreOrLessEquals(1));
        expect(materials.elementAt(1).properties.elementAt(7).index, isZero);
        expect(materials.elementAt(1).properties.elementAt(7).semantic, isZero);
        expect(materials.elementAt(1).properties.elementAt(8).key, equals('\$clr.transparent'));
        expect(materials.elementAt(1).properties.elementAt(8).value.runtimeType, double);
        expect(materials.elementAt(1).properties.elementAt(8).value, moreOrLessEquals(1));
        expect(materials.elementAt(1).properties.elementAt(8).index, isZero);
        expect(materials.elementAt(1).properties.elementAt(8).semantic, isZero);
        expect(materials.elementAt(1).properties.elementAt(9).key, equals('\$mat.refracti'));
        expect(materials.elementAt(1).properties.elementAt(9).value.runtimeType, double);
        expect(materials.elementAt(1).properties.elementAt(9).value, moreOrLessEquals(1));
        expect(materials.elementAt(1).properties.elementAt(9).index, isZero);
        expect(materials.elementAt(1).properties.elementAt(9).semantic, isZero);
        expect(materials.elementAt(1).properties.elementAt(10).key, equals('\$tex.file'));
        expect(materials.elementAt(1).properties.elementAt(10).value.runtimeType, String);
        expect(materials.elementAt(1).properties.elementAt(10).value, equals('.\\wal67ar_small.jpg'));
        expect(materials.elementAt(1).properties.elementAt(10).index, isZero);
        expect(materials.elementAt(1).properties.elementAt(10).semantic, equals(1));
        expect(materials.elementAt(1).properties.elementAt(11).key, equals('\$tex.uvwsrc'));
        expect(materials.elementAt(1).properties.elementAt(11).value.runtimeType, int);
        expect(materials.elementAt(1).properties.elementAt(11).value, isZero);
        expect(materials.elementAt(1).properties.elementAt(11).index, isZero);
        expect(materials.elementAt(1).properties.elementAt(11).semantic, equals(1));

      expect(materials.elementAt(2).properties.length, equals(12));
        expect(materials.elementAt(2).properties.elementAt(0).key, equals('?mat.name'));
        expect(materials.elementAt(2).properties.elementAt(0).value.runtimeType, String);
        expect(materials.elementAt(2).properties.elementAt(0).value, equals('Brusttex'));
        expect(materials.elementAt(2).properties.elementAt(0).index, isZero);
        expect(materials.elementAt(2).properties.elementAt(0).semantic, isZero);
        expect(materials.elementAt(2).properties.elementAt(1).key, equals('\$mat.shadingm'));
        expect(materials.elementAt(2).properties.elementAt(1).value.runtimeType, int);
        expect(materials.elementAt(2).properties.elementAt(1).value, equals(2));
        expect(materials.elementAt(2).properties.elementAt(1).index, isZero);
        expect(materials.elementAt(2).properties.elementAt(1).semantic, isZero);
        expect(materials.elementAt(2).properties.elementAt(2).key, equals('\$clr.ambient'));
        expect(materials.elementAt(2).properties.elementAt(2).value.runtimeType, double);
        expect(materials.elementAt(2).properties.elementAt(2).value, moreOrLessEquals(0.2));
        expect(materials.elementAt(2).properties.elementAt(2).index, isZero);
        expect(materials.elementAt(2).properties.elementAt(2).semantic, isZero);
        expect(materials.elementAt(2).properties.elementAt(3).key, equals('\$clr.diffuse'));
        expect(materials.elementAt(2).properties.elementAt(3).value.runtimeType, double);
        expect(materials.elementAt(2).properties.elementAt(3).value, moreOrLessEquals(0.8));
        expect(materials.elementAt(2).properties.elementAt(3).index, isZero);
        expect(materials.elementAt(2).properties.elementAt(3).semantic, isZero);
        expect(materials.elementAt(2).properties.elementAt(4).key, equals('\$clr.specular'));
        expect(materials.elementAt(2).properties.elementAt(4).value.runtimeType, double);
        expect(materials.elementAt(2).properties.elementAt(4).value, isZero);
        expect(materials.elementAt(2).properties.elementAt(4).index, isZero);
        expect(materials.elementAt(2).properties.elementAt(4).semantic, isZero);
        expect(materials.elementAt(2).properties.elementAt(5).key, equals('\$clr.emissive'));
        expect(materials.elementAt(2).properties.elementAt(5).value.runtimeType, double);
        expect(materials.elementAt(2).properties.elementAt(5).value, isZero);
        expect(materials.elementAt(2).properties.elementAt(5).index, isZero);
        expect(materials.elementAt(2).properties.elementAt(5).semantic, isZero);
        expect(materials.elementAt(2).properties.elementAt(6).key, equals('\$mat.shininess'));
        expect(materials.elementAt(2).properties.elementAt(6).value.runtimeType, double);
        expect(materials.elementAt(2).properties.elementAt(6).value, isZero);
        expect(materials.elementAt(2).properties.elementAt(6).index, isZero);
        expect(materials.elementAt(2).properties.elementAt(6).semantic, isZero);
        expect(materials.elementAt(2).properties.elementAt(7).key, equals('\$mat.opacity'));
        expect(materials.elementAt(2).properties.elementAt(7).value.runtimeType, double);
        expect(materials.elementAt(2).properties.elementAt(7).value, moreOrLessEquals(1));
        expect(materials.elementAt(2).properties.elementAt(7).index, isZero);
        expect(materials.elementAt(2).properties.elementAt(7).semantic, isZero);
        expect(materials.elementAt(2).properties.elementAt(8).key, equals('\$clr.transparent'));
        expect(materials.elementAt(2).properties.elementAt(8).value.runtimeType, double);
        expect(materials.elementAt(2).properties.elementAt(8).value, moreOrLessEquals(1));
        expect(materials.elementAt(2).properties.elementAt(8).index, isZero);
        expect(materials.elementAt(2).properties.elementAt(8).semantic, isZero);
        expect(materials.elementAt(2).properties.elementAt(9).key, equals('\$mat.refracti'));
        expect(materials.elementAt(2).properties.elementAt(9).value.runtimeType, double);
        expect(materials.elementAt(2).properties.elementAt(9).value, moreOrLessEquals(1));
        expect(materials.elementAt(2).properties.elementAt(9).index, isZero);
        expect(materials.elementAt(2).properties.elementAt(9).semantic, isZero);
        expect(materials.elementAt(2).properties.elementAt(10).key, equals('\$tex.file'));
        expect(materials.elementAt(2).properties.elementAt(10).value.runtimeType, String);
        expect(materials.elementAt(2).properties.elementAt(10).value, equals('.\\wal69ar_small.jpg'));
        expect(materials.elementAt(2).properties.elementAt(10).index, isZero);
        expect(materials.elementAt(2).properties.elementAt(10).semantic, equals(1));
        expect(materials.elementAt(2).properties.elementAt(11).key, equals('\$tex.uvwsrc'));
        expect(materials.elementAt(2).properties.elementAt(11).value.runtimeType, int);
        expect(materials.elementAt(2).properties.elementAt(11).value, isZero);
        expect(materials.elementAt(2).properties.elementAt(11).index, isZero);
        expect(materials.elementAt(2).properties.elementAt(11).semantic, equals(1));

      expect(materials.elementAt(3).properties.length, equals(12));
        expect(materials.elementAt(3).properties.elementAt(0).key, equals('?mat.name'));
        expect(materials.elementAt(3).properties.elementAt(0).value.runtimeType, String);
        expect(materials.elementAt(3).properties.elementAt(0).value, equals('HLeibTex'));
        expect(materials.elementAt(3).properties.elementAt(0).index, isZero);
        expect(materials.elementAt(3).properties.elementAt(0).semantic, isZero);
        expect(materials.elementAt(3).properties.elementAt(1).key, equals('\$mat.shadingm'));
        expect(materials.elementAt(3).properties.elementAt(1).value.runtimeType, int);
        expect(materials.elementAt(3).properties.elementAt(1).value, equals(2));
        expect(materials.elementAt(3).properties.elementAt(1).index, isZero);
        expect(materials.elementAt(3).properties.elementAt(1).semantic, isZero);
        expect(materials.elementAt(3).properties.elementAt(2).key, equals('\$clr.ambient'));
        expect(materials.elementAt(3).properties.elementAt(2).value.runtimeType, double);
        expect(materials.elementAt(3).properties.elementAt(2).value, moreOrLessEquals(0.2));
        expect(materials.elementAt(3).properties.elementAt(2).index, isZero);
        expect(materials.elementAt(3).properties.elementAt(2).semantic, isZero);
        expect(materials.elementAt(3).properties.elementAt(3).key, equals('\$clr.diffuse'));
        expect(materials.elementAt(3).properties.elementAt(3).value.runtimeType, double);
        expect(materials.elementAt(3).properties.elementAt(3).value, moreOrLessEquals(0.690196));
        expect(materials.elementAt(3).properties.elementAt(3).index, isZero);
        expect(materials.elementAt(3).properties.elementAt(3).semantic, isZero);
        expect(materials.elementAt(3).properties.elementAt(4).key, equals('\$clr.specular'));
        expect(materials.elementAt(3).properties.elementAt(4).value.runtimeType, double);
        expect(materials.elementAt(3).properties.elementAt(4).value, isZero);
        expect(materials.elementAt(3).properties.elementAt(4).index, isZero);
        expect(materials.elementAt(3).properties.elementAt(4).semantic, isZero);
        expect(materials.elementAt(3).properties.elementAt(5).key, equals('\$clr.emissive'));
        expect(materials.elementAt(3).properties.elementAt(5).value.runtimeType, double);
        expect(materials.elementAt(3).properties.elementAt(5).value, isZero);
        expect(materials.elementAt(3).properties.elementAt(5).index, isZero);
        expect(materials.elementAt(3).properties.elementAt(5).semantic, isZero);
        expect(materials.elementAt(3).properties.elementAt(6).key, equals('\$mat.shininess'));
        expect(materials.elementAt(3).properties.elementAt(6).value.runtimeType, double);
        expect(materials.elementAt(3).properties.elementAt(6).value, isZero);
        expect(materials.elementAt(3).properties.elementAt(6).index, isZero);
        expect(materials.elementAt(3).properties.elementAt(6).semantic, isZero);
        expect(materials.elementAt(3).properties.elementAt(7).key, equals('\$mat.opacity'));
        expect(materials.elementAt(3).properties.elementAt(7).value.runtimeType, double);
        expect(materials.elementAt(3).properties.elementAt(7).value, moreOrLessEquals(1));
        expect(materials.elementAt(3).properties.elementAt(7).index, isZero);
        expect(materials.elementAt(3).properties.elementAt(7).semantic, isZero);
        expect(materials.elementAt(3).properties.elementAt(8).key, equals('\$clr.transparent'));
        expect(materials.elementAt(3).properties.elementAt(8).value.runtimeType, double);
        expect(materials.elementAt(3).properties.elementAt(8).value, moreOrLessEquals(1));
        expect(materials.elementAt(3).properties.elementAt(8).index, isZero);
        expect(materials.elementAt(3).properties.elementAt(8).semantic, isZero);
        expect(materials.elementAt(3).properties.elementAt(9).key, equals('\$mat.refracti'));
        expect(materials.elementAt(3).properties.elementAt(9).value.runtimeType, double);
        expect(materials.elementAt(3).properties.elementAt(9).value, moreOrLessEquals(1));
        expect(materials.elementAt(3).properties.elementAt(9).index, isZero);
        expect(materials.elementAt(3).properties.elementAt(9).semantic, isZero);
        expect(materials.elementAt(3).properties.elementAt(10).key, equals('\$tex.file'));
        expect(materials.elementAt(3).properties.elementAt(10).value.runtimeType, String);
        expect(materials.elementAt(3).properties.elementAt(10).value, equals('.\\SpiderTex.jpg'));
        expect(materials.elementAt(3).properties.elementAt(10).index, isZero);
        expect(materials.elementAt(3).properties.elementAt(10).semantic, equals(1));
        expect(materials.elementAt(3).properties.elementAt(11).key, equals('\$tex.uvwsrc'));
        expect(materials.elementAt(3).properties.elementAt(11).value.runtimeType, int);
        expect(materials.elementAt(3).properties.elementAt(11).value, isZero);
        expect(materials.elementAt(3).properties.elementAt(11).index, isZero);
        expect(materials.elementAt(3).properties.elementAt(11).semantic, equals(1));

      expect(materials.elementAt(4).properties.length, equals(12));
        expect(materials.elementAt(4).properties.elementAt(0).key, equals('?mat.name'));
        expect(materials.elementAt(4).properties.elementAt(0).value.runtimeType, String);
        expect(materials.elementAt(4).properties.elementAt(0).value, equals('BeinTex'));
        expect(materials.elementAt(4).properties.elementAt(0).index, isZero);
        expect(materials.elementAt(4).properties.elementAt(0).semantic, isZero);
        expect(materials.elementAt(4).properties.elementAt(1).key, equals('\$mat.shadingm'));
        expect(materials.elementAt(4).properties.elementAt(1).value.runtimeType, int);
        expect(materials.elementAt(4).properties.elementAt(1).value, equals(2));
        expect(materials.elementAt(4).properties.elementAt(1).index, isZero);
        expect(materials.elementAt(4).properties.elementAt(1).semantic, isZero);
        expect(materials.elementAt(4).properties.elementAt(2).key, equals('\$clr.ambient'));
        expect(materials.elementAt(4).properties.elementAt(2).value.runtimeType, double);
        expect(materials.elementAt(4).properties.elementAt(2).value, moreOrLessEquals(0.2));
        expect(materials.elementAt(4).properties.elementAt(2).index, isZero);
        expect(materials.elementAt(4).properties.elementAt(2).semantic, isZero);
        expect(materials.elementAt(4).properties.elementAt(3).key, equals('\$clr.diffuse'));
        expect(materials.elementAt(4).properties.elementAt(3).value.runtimeType, double);
        expect(materials.elementAt(4).properties.elementAt(3).value, moreOrLessEquals(0.8));
        expect(materials.elementAt(4).properties.elementAt(3).index, isZero);
        expect(materials.elementAt(4).properties.elementAt(3).semantic, isZero);
        expect(materials.elementAt(4).properties.elementAt(4).key, equals('\$clr.specular'));
        expect(materials.elementAt(4).properties.elementAt(4).value.runtimeType, double);
        expect(materials.elementAt(4).properties.elementAt(4).value, isZero);
        expect(materials.elementAt(4).properties.elementAt(4).index, isZero);
        expect(materials.elementAt(4).properties.elementAt(4).semantic, isZero);
        expect(materials.elementAt(4).properties.elementAt(5).key, equals('\$clr.emissive'));
        expect(materials.elementAt(4).properties.elementAt(5).value.runtimeType, double);
        expect(materials.elementAt(4).properties.elementAt(5).value, isZero);
        expect(materials.elementAt(4).properties.elementAt(5).index, isZero);
        expect(materials.elementAt(4).properties.elementAt(5).semantic, isZero);
        expect(materials.elementAt(4).properties.elementAt(6).key, equals('\$mat.shininess'));
        expect(materials.elementAt(4).properties.elementAt(6).value.runtimeType, double);
        expect(materials.elementAt(4).properties.elementAt(6).value, isZero);
        expect(materials.elementAt(4).properties.elementAt(6).index, isZero);
        expect(materials.elementAt(4).properties.elementAt(6).semantic, isZero);
        expect(materials.elementAt(4).properties.elementAt(7).key, equals('\$mat.opacity'));
        expect(materials.elementAt(4).properties.elementAt(7).value.runtimeType, double);
        expect(materials.elementAt(4).properties.elementAt(7).value, moreOrLessEquals(1));
        expect(materials.elementAt(4).properties.elementAt(7).index, isZero);
        expect(materials.elementAt(4).properties.elementAt(7).semantic, isZero);
        expect(materials.elementAt(4).properties.elementAt(8).key, equals('\$clr.transparent'));
        expect(materials.elementAt(4).properties.elementAt(8).value.runtimeType, double);
        expect(materials.elementAt(4).properties.elementAt(8).value, moreOrLessEquals(1));
        expect(materials.elementAt(4).properties.elementAt(8).index, isZero);
        expect(materials.elementAt(4).properties.elementAt(8).semantic, isZero);
        expect(materials.elementAt(4).properties.elementAt(9).key, equals('\$mat.refracti'));
        expect(materials.elementAt(4).properties.elementAt(9).value.runtimeType, double);
        expect(materials.elementAt(4).properties.elementAt(9).value, moreOrLessEquals(1));
        expect(materials.elementAt(4).properties.elementAt(9).index, isZero);
        expect(materials.elementAt(4).properties.elementAt(9).semantic, isZero);
        expect(materials.elementAt(4).properties.elementAt(10).key, equals('\$tex.file'));
        expect(materials.elementAt(4).properties.elementAt(10).value.runtimeType, String);
        expect(materials.elementAt(4).properties.elementAt(10).value, equals('.\\drkwood2.jpg'));
        expect(materials.elementAt(4).properties.elementAt(10).index, isZero);
        expect(materials.elementAt(4).properties.elementAt(10).semantic, equals(1));
        expect(materials.elementAt(4).properties.elementAt(11).key, equals('\$tex.uvwsrc'));
        expect(materials.elementAt(4).properties.elementAt(11).value.runtimeType, int);
        expect(materials.elementAt(4).properties.elementAt(11).value, isZero);
        expect(materials.elementAt(4).properties.elementAt(11).index, isZero);
        expect(materials.elementAt(4).properties.elementAt(11).semantic, equals(1));

      expect(materials.elementAt(5).properties.length, equals(12));
        expect(materials.elementAt(5).properties.elementAt(0).key, equals('?mat.name'));
        expect(materials.elementAt(5).properties.elementAt(0).value.runtimeType, String);
        expect(materials.elementAt(5).properties.elementAt(0).value, equals('Augentex'));
        expect(materials.elementAt(5).properties.elementAt(0).index, isZero);
        expect(materials.elementAt(5).properties.elementAt(0).semantic, isZero);
        expect(materials.elementAt(5).properties.elementAt(1).key, equals('\$mat.shadingm'));
        expect(materials.elementAt(5).properties.elementAt(1).value.runtimeType, int);
        expect(materials.elementAt(5).properties.elementAt(1).value, equals(2));
        expect(materials.elementAt(5).properties.elementAt(1).index, isZero);
        expect(materials.elementAt(5).properties.elementAt(1).semantic, isZero);
        expect(materials.elementAt(5).properties.elementAt(2).key, equals('\$clr.ambient'));
        expect(materials.elementAt(5).properties.elementAt(2).value.runtimeType, double);
        expect(materials.elementAt(5).properties.elementAt(2).value, moreOrLessEquals(0.2));
        expect(materials.elementAt(5).properties.elementAt(2).index, isZero);
        expect(materials.elementAt(5).properties.elementAt(2).semantic, isZero);
        expect(materials.elementAt(5).properties.elementAt(3).key, equals('\$clr.diffuse'));
        expect(materials.elementAt(5).properties.elementAt(3).value.runtimeType, double);
        expect(materials.elementAt(5).properties.elementAt(3).value, moreOrLessEquals(0.8));
        expect(materials.elementAt(5).properties.elementAt(3).index, isZero);
        expect(materials.elementAt(5).properties.elementAt(3).semantic, isZero);
        expect(materials.elementAt(5).properties.elementAt(4).key, equals('\$clr.specular'));
        expect(materials.elementAt(5).properties.elementAt(4).value.runtimeType, double);
        expect(materials.elementAt(5).properties.elementAt(4).value, isZero);
        expect(materials.elementAt(5).properties.elementAt(4).index, isZero);
        expect(materials.elementAt(5).properties.elementAt(4).semantic, isZero);
        expect(materials.elementAt(5).properties.elementAt(5).key, equals('\$clr.emissive'));
        expect(materials.elementAt(5).properties.elementAt(5).value.runtimeType, double);
        expect(materials.elementAt(5).properties.elementAt(5).value, isZero);
        expect(materials.elementAt(5).properties.elementAt(5).index, isZero);
        expect(materials.elementAt(5).properties.elementAt(5).semantic, isZero);
        expect(materials.elementAt(5).properties.elementAt(6).key, equals('\$mat.shininess'));
        expect(materials.elementAt(5).properties.elementAt(6).value.runtimeType, double);
        expect(materials.elementAt(5).properties.elementAt(6).value, isZero);
        expect(materials.elementAt(5).properties.elementAt(6).index, isZero);
        expect(materials.elementAt(5).properties.elementAt(6).semantic, isZero);
        expect(materials.elementAt(5).properties.elementAt(7).key, equals('\$mat.opacity'));
        expect(materials.elementAt(5).properties.elementAt(7).value.runtimeType, double);
        expect(materials.elementAt(5).properties.elementAt(7).value, moreOrLessEquals(1));
        expect(materials.elementAt(5).properties.elementAt(7).index, isZero);
        expect(materials.elementAt(5).properties.elementAt(7).semantic, isZero);
        expect(materials.elementAt(5).properties.elementAt(8).key, equals('\$clr.transparent'));
        expect(materials.elementAt(5).properties.elementAt(8).value.runtimeType, double);
        expect(materials.elementAt(5).properties.elementAt(8).value, moreOrLessEquals(1));
        expect(materials.elementAt(5).properties.elementAt(8).index, isZero);
        expect(materials.elementAt(5).properties.elementAt(8).semantic, isZero);
        expect(materials.elementAt(5).properties.elementAt(9).key, equals('\$mat.refracti'));
        expect(materials.elementAt(5).properties.elementAt(9).value.runtimeType, double);
        expect(materials.elementAt(5).properties.elementAt(9).value, moreOrLessEquals(1));
        expect(materials.elementAt(5).properties.elementAt(9).index, isZero);
        expect(materials.elementAt(5).properties.elementAt(9).semantic, isZero);
        expect(materials.elementAt(5).properties.elementAt(10).key, equals('\$tex.file'));
        expect(materials.elementAt(5).properties.elementAt(10).value.runtimeType, String);
        expect(materials.elementAt(5).properties.elementAt(10).value, equals('.\\engineflare1.jpg'));
        expect(materials.elementAt(5).properties.elementAt(10).index, isZero);
        expect(materials.elementAt(5).properties.elementAt(10).semantic, equals(1));
        expect(materials.elementAt(5).properties.elementAt(11).key, equals('\$tex.uvwsrc'));
        expect(materials.elementAt(5).properties.elementAt(11).value.runtimeType, int);
        expect(materials.elementAt(5).properties.elementAt(11).value, isZero);
        expect(materials.elementAt(5).properties.elementAt(11).index, isZero);
        expect(materials.elementAt(5).properties.elementAt(11).semantic, equals(1));
    });
  });

}
