import 'dart:ffi';
import 'dart:typed_data';
import 'package:ffi/ffi.dart';
import 'package:test/test.dart';
import '../lib/assimp.dart';
import '../lib/src/bindings.dart';
import 'test_utils.dart';

// DO NOT EDIT (generated by tool/testgen)

void main() {
  prepareTest();

  test('null', () {
    expect(Camera.fromNative(null), isNull);
  });

  test('size', () {
    expect(sizeOf<aiCamera>(), equals(1080));
  });

  test('size', () {
    Camera a = Camera.fromNative(allocate<aiCamera>());
    Camera b = Camera.fromNative(allocate<aiCamera>());
    Camera aa = Camera.fromNative(a.ptr);
    Camera bb = Camera.fromNative(b.ptr);
    expect(a, equals(a));
    expect(a, equals(aa));
    expect(b, equals(b));
    expect(b, equals(bb));
    expect(a, isNot(equals(b)));
    expect(a, isNot(equals(bb)));
    expect(b, isNot(equals(a)));
    expect(b, isNot(equals(aa)));
  });

  test('toString', () {
    expect(Camera.fromNative(allocate<aiCamera>()).toString(), matches(r'Camera\(Pointer<aiCamera>: address=0x[0-f]+\)'));
  });

  test('3mf', () {
    testScene('3mf/box.3mf', (scene) {
      final cameras = scene.cameras;
      expect(cameras, isEmpty);
      expect(cameras.length, isZero);
    });
    testScene('3mf/spider.3mf', (scene) {
      final cameras = scene.cameras;
      expect(cameras, isEmpty);
      expect(cameras.length, isZero);
    });
  });

  test('fbx', () {
    testScene('fbx/huesitos.fbx', (scene) {
      final cameras = scene.cameras;
      expect(cameras, isNotEmpty);
      expect(cameras.length, isNonZero);
      expect(cameras.elementAt(0).name, equals('Camera'));
      expect(cameras.elementAt(0).position, vector3MoreOrLessEquals(Vector3(0, 0, 0)));
      expect(cameras.elementAt(0).up, vector3MoreOrLessEquals(Vector3(0, 1, 0)));
      expect(cameras.elementAt(0).lookAt, vector3MoreOrLessEquals(Vector3(1, 0, 0)));
      expect(cameras.elementAt(0).horizontalFov, moreOrLessEquals(0.857556));
      expect(cameras.elementAt(0).clipPlaneNear, moreOrLessEquals(10));
      expect(cameras.elementAt(0).clipPlaneFar, moreOrLessEquals(10000));
      expect(cameras.elementAt(0).aspect, moreOrLessEquals(1.33333));
    });
  });

  test('obj', () {
    testScene('Obj/Spider/spider.obj', (scene) {
      final cameras = scene.cameras;
      expect(cameras, isEmpty);
      expect(cameras.length, isZero);
    });
  });

}
