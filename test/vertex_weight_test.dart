import 'dart:ffi';
import 'dart:typed_data';
import 'package:ffi/ffi.dart';
import 'package:test/test.dart';
import '../lib/assimp.dart';
import '../lib/src/bindings.dart';
import 'test_utils.dart';

// DO NOT EDIT (generated by tool/testgen)

void main() {
  prepareTest();

  test('null', () {
    expect(VertexWeight.fromNative(null), isNull);
  });

  test('size', () {
    expect(sizeOf<aiVertexWeight>(), equals(8));
  });

  test('size', () {
    final a = VertexWeight.fromNative(allocate<aiVertexWeight>());
    final b = VertexWeight.fromNative(allocate<aiVertexWeight>());
    final aa = VertexWeight.fromNative(a.ptr);
    final bb = VertexWeight.fromNative(b.ptr);
    expect(a, equals(a));
    expect(a, equals(aa));
    expect(b, equals(b));
    expect(b, equals(bb));
    expect(a, isNot(equals(b)));
    expect(a, isNot(equals(bb)));
    expect(b, isNot(equals(a)));
    expect(b, isNot(equals(aa)));
  });

  test('toString', () {
    expect(VertexWeight.fromNative(allocate<aiVertexWeight>()).toString(), matches(r'VertexWeight\(Pointer<aiVertexWeight>: address=0x[0-f]+\)'));
  });

}
