import 'dart:ffi';
import 'package:ffi/ffi.dart';
import 'package:test/test.dart';
import 'package:assimp/assimp.dart';
import '../lib/src/bindings.dart';
import 'test_utils.dart';

// DO NOT EDIT (generated by tool/testgen)

void main() {
  prepareTest();

  test('size', () {
    expect(sizeOf<aiNode>(), equals(1144));
  });

  test('null', () {
    testNodes(null, (node) {
      expect(node.isNull, isTrue);
      expect(node.name, isNull);
      expect(node.transformation, isNull);
      expect(node.parent, isNull);
      expect(node.children, isEmpty);
      expect(node.meshes, isEmpty);
      expect(node.metaData, isNull);
    });
  });

  test('3mf', () {
    testNodes('3mf/box.3mf', (rootNode) {
      expect(rootNode.name, equals('3MF'));
      expect(rootNode.transformation, matrix4MoreOrLessEquals(Matrix4(1, 0, 0, 0, 0 ,1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)));
      expect(rootNode.parent, isNull);
      expect(rootNode.children.length, equals(1));
      expect(rootNode.children.elementAt(0).name, isEmpty);
      expect(rootNode.children.elementAt(0).transformation, matrix4MoreOrLessEquals(Matrix4(1, 0, 0, 0, 0 ,1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)));
      expect(rootNode.children.elementAt(0).parent, isNotNull);
      expect(rootNode.children.elementAt(0).children.length, isZero);
      expect(rootNode.children.elementAt(0).meshes, equals([0]));
      expect(rootNode.children.elementAt(0).metaData, isNull);
      expect(rootNode.meshes, equals([]));
      expect(rootNode.metaData, isNull);
    });

    testNodes('3mf/spider.3mf', (rootNode) {
      expect(rootNode.name, equals('3MF'));
      expect(rootNode.transformation, matrix4MoreOrLessEquals(Matrix4(1, 0, 0, 0, 0 ,1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)));
      expect(rootNode.parent, isNull);
      expect(rootNode.children.length, equals(19));
      expect(rootNode.children.elementAt(0).name, equals('HLeib01'));
      expect(rootNode.children.elementAt(0).transformation, matrix4MoreOrLessEquals(Matrix4(1, 0, 0, 0, 0 ,1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)));
      expect(rootNode.children.elementAt(0).parent, isNotNull);
      expect(rootNode.children.elementAt(0).children.length, isZero);
      expect(rootNode.children.elementAt(0).meshes, equals([0]));
      expect(rootNode.children.elementAt(0).metaData, isNull);
      expect(rootNode.children.elementAt(1).name, equals('OK'));
      expect(rootNode.children.elementAt(1).transformation, matrix4MoreOrLessEquals(Matrix4(1, 0, 0, 0, 0 ,1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)));
      expect(rootNode.children.elementAt(1).parent, isNotNull);
      expect(rootNode.children.elementAt(1).children.length, isZero);
      expect(rootNode.children.elementAt(1).meshes, equals([1]));
      expect(rootNode.children.elementAt(1).metaData, isNull);
      expect(rootNode.children.elementAt(2).name, equals('Bein1Li'));
      expect(rootNode.children.elementAt(2).transformation, matrix4MoreOrLessEquals(Matrix4(1, 0, 0, 0, 0 ,1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)));
      expect(rootNode.children.elementAt(2).parent, isNotNull);
      expect(rootNode.children.elementAt(2).children.length, isZero);
      expect(rootNode.children.elementAt(2).meshes, equals([2]));
      expect(rootNode.children.elementAt(2).metaData, isNull);
      expect(rootNode.children.elementAt(3).name, equals('Bein1Re'));
      expect(rootNode.children.elementAt(3).transformation, matrix4MoreOrLessEquals(Matrix4(1, 0, 0, 0, 0 ,1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)));
      expect(rootNode.children.elementAt(3).parent, isNotNull);
      expect(rootNode.children.elementAt(3).children.length, isZero);
      expect(rootNode.children.elementAt(3).meshes, equals([3]));
      expect(rootNode.children.elementAt(3).metaData, isNull);
      expect(rootNode.children.elementAt(4).name, equals('Bein2Li'));
      expect(rootNode.children.elementAt(4).transformation, matrix4MoreOrLessEquals(Matrix4(1, 0, 0, 0, 0 ,1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)));
      expect(rootNode.children.elementAt(4).parent, isNotNull);
      expect(rootNode.children.elementAt(4).children.length, isZero);
      expect(rootNode.children.elementAt(4).meshes, equals([4]));
      expect(rootNode.children.elementAt(4).metaData, isNull);
      expect(rootNode.children.elementAt(5).name, equals('Bein2Re'));
      expect(rootNode.children.elementAt(5).transformation, matrix4MoreOrLessEquals(Matrix4(1, 0, 0, 0, 0 ,1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)));
      expect(rootNode.children.elementAt(5).parent, isNotNull);
      expect(rootNode.children.elementAt(5).children.length, isZero);
      expect(rootNode.children.elementAt(5).meshes, equals([5]));
      expect(rootNode.children.elementAt(5).metaData, isNull);
      expect(rootNode.children.elementAt(6).name, equals('Bein3Re'));
      expect(rootNode.children.elementAt(6).transformation, matrix4MoreOrLessEquals(Matrix4(1, 0, 0, 0, 0 ,1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)));
      expect(rootNode.children.elementAt(6).parent, isNotNull);
      expect(rootNode.children.elementAt(6).children.length, isZero);
      expect(rootNode.children.elementAt(6).meshes, equals([6]));
      expect(rootNode.children.elementAt(6).metaData, isNull);
      expect(rootNode.children.elementAt(7).name, equals('Bein3Li'));
      expect(rootNode.children.elementAt(7).transformation, matrix4MoreOrLessEquals(Matrix4(1, 0, 0, 0, 0 ,1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)));
      expect(rootNode.children.elementAt(7).parent, isNotNull);
      expect(rootNode.children.elementAt(7).children.length, isZero);
      expect(rootNode.children.elementAt(7).meshes, equals([7]));
      expect(rootNode.children.elementAt(7).metaData, isNull);
      expect(rootNode.children.elementAt(8).name, equals('Bein4Re'));
      expect(rootNode.children.elementAt(8).transformation, matrix4MoreOrLessEquals(Matrix4(1, 0, 0, 0, 0 ,1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)));
      expect(rootNode.children.elementAt(8).parent, isNotNull);
      expect(rootNode.children.elementAt(8).children.length, isZero);
      expect(rootNode.children.elementAt(8).meshes, equals([8]));
      expect(rootNode.children.elementAt(8).metaData, isNull);
      expect(rootNode.children.elementAt(9).name, equals('Bein4Li'));
      expect(rootNode.children.elementAt(9).transformation, matrix4MoreOrLessEquals(Matrix4(1, 0, 0, 0, 0 ,1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)));
      expect(rootNode.children.elementAt(9).parent, isNotNull);
      expect(rootNode.children.elementAt(9).children.length, isZero);
      expect(rootNode.children.elementAt(9).meshes, equals([9]));
      expect(rootNode.children.elementAt(9).metaData, isNull);
      expect(rootNode.children.elementAt(10).name, equals('Zahn'));
      expect(rootNode.children.elementAt(10).transformation, matrix4MoreOrLessEquals(Matrix4(1, 0, 0, 0, 0 ,1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)));
      expect(rootNode.children.elementAt(10).parent, isNotNull);
      expect(rootNode.children.elementAt(10).children.length, isZero);
      expect(rootNode.children.elementAt(10).meshes, equals([10]));
      expect(rootNode.children.elementAt(10).metaData, isNull);
      expect(rootNode.children.elementAt(11).name, equals('klZahn'));
      expect(rootNode.children.elementAt(11).transformation, matrix4MoreOrLessEquals(Matrix4(1, 0, 0, 0, 0 ,1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)));
      expect(rootNode.children.elementAt(11).parent, isNotNull);
      expect(rootNode.children.elementAt(11).children.length, isZero);
      expect(rootNode.children.elementAt(11).meshes, equals([11]));
      expect(rootNode.children.elementAt(11).metaData, isNull);
      expect(rootNode.children.elementAt(12).name, equals('Kopf'));
      expect(rootNode.children.elementAt(12).transformation, matrix4MoreOrLessEquals(Matrix4(1, 0, 0, 0, 0 ,1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)));
      expect(rootNode.children.elementAt(12).parent, isNotNull);
      expect(rootNode.children.elementAt(12).children.length, isZero);
      expect(rootNode.children.elementAt(12).meshes, equals([12]));
      expect(rootNode.children.elementAt(12).metaData, isNull);
      expect(rootNode.children.elementAt(13).name, equals('Brust'));
      expect(rootNode.children.elementAt(13).transformation, matrix4MoreOrLessEquals(Matrix4(1, 0, 0, 0, 0 ,1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)));
      expect(rootNode.children.elementAt(13).parent, isNotNull);
      expect(rootNode.children.elementAt(13).children.length, isZero);
      expect(rootNode.children.elementAt(13).meshes, equals([13]));
      expect(rootNode.children.elementAt(13).metaData, isNull);
      expect(rootNode.children.elementAt(14).name, equals('Kopf2'));
      expect(rootNode.children.elementAt(14).transformation, matrix4MoreOrLessEquals(Matrix4(1, 0, 0, 0, 0 ,1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)));
      expect(rootNode.children.elementAt(14).parent, isNotNull);
      expect(rootNode.children.elementAt(14).children.length, isZero);
      expect(rootNode.children.elementAt(14).meshes, equals([14]));
      expect(rootNode.children.elementAt(14).metaData, isNull);
      expect(rootNode.children.elementAt(15).name, equals('Zahn2'));
      expect(rootNode.children.elementAt(15).transformation, matrix4MoreOrLessEquals(Matrix4(1, 0, 0, 0, 0 ,1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)));
      expect(rootNode.children.elementAt(15).parent, isNotNull);
      expect(rootNode.children.elementAt(15).children.length, isZero);
      expect(rootNode.children.elementAt(15).meshes, equals([15]));
      expect(rootNode.children.elementAt(15).metaData, isNull);
      expect(rootNode.children.elementAt(16).name, equals('klZahn2'));
      expect(rootNode.children.elementAt(16).transformation, matrix4MoreOrLessEquals(Matrix4(1, 0, 0, 0, 0 ,1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)));
      expect(rootNode.children.elementAt(16).parent, isNotNull);
      expect(rootNode.children.elementAt(16).children.length, isZero);
      expect(rootNode.children.elementAt(16).meshes, equals([16]));
      expect(rootNode.children.elementAt(16).metaData, isNull);
      expect(rootNode.children.elementAt(17).name, equals('Auge'));
      expect(rootNode.children.elementAt(17).transformation, matrix4MoreOrLessEquals(Matrix4(1, 0, 0, 0, 0 ,1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)));
      expect(rootNode.children.elementAt(17).parent, isNotNull);
      expect(rootNode.children.elementAt(17).children.length, isZero);
      expect(rootNode.children.elementAt(17).meshes, equals([17]));
      expect(rootNode.children.elementAt(17).metaData, isNull);
      expect(rootNode.children.elementAt(18).name, equals('Duplicate05'));
      expect(rootNode.children.elementAt(18).transformation, matrix4MoreOrLessEquals(Matrix4(1, 0, 0, 0, 0 ,1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)));
      expect(rootNode.children.elementAt(18).parent, isNotNull);
      expect(rootNode.children.elementAt(18).children.length, isZero);
      expect(rootNode.children.elementAt(18).meshes, equals([18]));
      expect(rootNode.children.elementAt(18).metaData, isNull);
      expect(rootNode.meshes, equals([]));
      expect(rootNode.metaData, isNull);
    });

  });

  test('fbx', () {
    testNodes('fbx/huesitos.fbx', (rootNode) {
      expect(rootNode.name, equals('RootNode'));
      expect(rootNode.transformation, matrix4MoreOrLessEquals(Matrix4(1, 0, 0, 0, 0 ,1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)));
      expect(rootNode.parent, isNull);
      expect(rootNode.children.length, equals(4));
      expect(rootNode.children.elementAt(0).name, equals('Armature'));
      expect(rootNode.children.elementAt(0).transformation, matrix4MoreOrLessEquals(Matrix4(100, 0, 0, -4.024, 0 ,-4.37114e-06, 100, 0, 0, -100, -4.37114e-06, -307.135, 0, 0, 0, 1)));
      expect(rootNode.children.elementAt(0).parent, isNotNull);
      expect(rootNode.children.elementAt(0).children.length, equals(1));
      expect(rootNode.children.elementAt(0).meshes, equals([]));
      expect(rootNode.children.elementAt(0).metaData, isNotNull);
      expect(rootNode.children.elementAt(1).name, equals('Cylinder'));
      expect(rootNode.children.elementAt(1).transformation, matrix4MoreOrLessEquals(Matrix4(100, 0, 0, -3.49913, 0 ,-4.37114e-06, 100, 125.968, 0, -100, -4.37114e-06, -309.672, 0, 0, 0, 1)));
      expect(rootNode.children.elementAt(1).parent, isNotNull);
      expect(rootNode.children.elementAt(1).children.length, isZero);
      expect(rootNode.children.elementAt(1).meshes, equals([0]));
      expect(rootNode.children.elementAt(1).metaData, isNotNull);
      expect(rootNode.children.elementAt(2).name, equals('Lamp'));
      expect(rootNode.children.elementAt(2).transformation, matrix4MoreOrLessEquals(Matrix4(-29.0865, 56.6393, 77.1101, 471.645, -5.5189 ,79.4672, -60.4525, 348.614, -95.5171, -21.8391, -19.9883, 400.882, 0, 0, 0, 1)));
      expect(rootNode.children.elementAt(2).parent, isNotNull);
      expect(rootNode.children.elementAt(2).children.length, isZero);
      expect(rootNode.children.elementAt(2).meshes, equals([]));
      expect(rootNode.children.elementAt(2).metaData, isNotNull);
      expect(rootNode.children.elementAt(3).name, equals('Camera'));
      expect(rootNode.children.elementAt(3).transformation, matrix4MoreOrLessEquals(Matrix4(-65.4862, -31.737, 68.5881, 748.113, -44.5245 ,89.5343, -1.08168, 534.367, -61.0666, -31.2469, -72.7634, 650.764, 0, 0, 0, 1)));
      expect(rootNode.children.elementAt(3).parent, isNotNull);
      expect(rootNode.children.elementAt(3).children.length, isZero);
      expect(rootNode.children.elementAt(3).meshes, equals([]));
      expect(rootNode.children.elementAt(3).metaData, isNotNull);
      expect(rootNode.meshes, equals([]));
      expect(rootNode.metaData, isNull);
    });

  });

  test('obj', () {
    testNodes('Obj/Spider/spider.obj', (rootNode) {
      expect(rootNode.name, equals('spider.obj'));
      expect(rootNode.transformation, matrix4MoreOrLessEquals(Matrix4(1, 0, 0, 0, 0 ,1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)));
      expect(rootNode.parent, isNull);
      expect(rootNode.children.length, equals(19));
      expect(rootNode.children.elementAt(0).name, equals('HLeib01'));
      expect(rootNode.children.elementAt(0).transformation, matrix4MoreOrLessEquals(Matrix4(1, 0, 0, 0, 0 ,1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)));
      expect(rootNode.children.elementAt(0).parent, isNotNull);
      expect(rootNode.children.elementAt(0).children.length, isZero);
      expect(rootNode.children.elementAt(0).meshes, equals([0]));
      expect(rootNode.children.elementAt(0).metaData, isNull);
      expect(rootNode.children.elementAt(1).name, equals('OK'));
      expect(rootNode.children.elementAt(1).transformation, matrix4MoreOrLessEquals(Matrix4(1, 0, 0, 0, 0 ,1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)));
      expect(rootNode.children.elementAt(1).parent, isNotNull);
      expect(rootNode.children.elementAt(1).children.length, isZero);
      expect(rootNode.children.elementAt(1).meshes, equals([1]));
      expect(rootNode.children.elementAt(1).metaData, isNull);
      expect(rootNode.children.elementAt(2).name, equals('Bein1Li'));
      expect(rootNode.children.elementAt(2).transformation, matrix4MoreOrLessEquals(Matrix4(1, 0, 0, 0, 0 ,1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)));
      expect(rootNode.children.elementAt(2).parent, isNotNull);
      expect(rootNode.children.elementAt(2).children.length, isZero);
      expect(rootNode.children.elementAt(2).meshes, equals([2]));
      expect(rootNode.children.elementAt(2).metaData, isNull);
      expect(rootNode.children.elementAt(3).name, equals('Bein1Re'));
      expect(rootNode.children.elementAt(3).transformation, matrix4MoreOrLessEquals(Matrix4(1, 0, 0, 0, 0 ,1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)));
      expect(rootNode.children.elementAt(3).parent, isNotNull);
      expect(rootNode.children.elementAt(3).children.length, isZero);
      expect(rootNode.children.elementAt(3).meshes, equals([3]));
      expect(rootNode.children.elementAt(3).metaData, isNull);
      expect(rootNode.children.elementAt(4).name, equals('Bein2Li'));
      expect(rootNode.children.elementAt(4).transformation, matrix4MoreOrLessEquals(Matrix4(1, 0, 0, 0, 0 ,1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)));
      expect(rootNode.children.elementAt(4).parent, isNotNull);
      expect(rootNode.children.elementAt(4).children.length, isZero);
      expect(rootNode.children.elementAt(4).meshes, equals([4]));
      expect(rootNode.children.elementAt(4).metaData, isNull);
      expect(rootNode.children.elementAt(5).name, equals('Bein2Re'));
      expect(rootNode.children.elementAt(5).transformation, matrix4MoreOrLessEquals(Matrix4(1, 0, 0, 0, 0 ,1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)));
      expect(rootNode.children.elementAt(5).parent, isNotNull);
      expect(rootNode.children.elementAt(5).children.length, isZero);
      expect(rootNode.children.elementAt(5).meshes, equals([5]));
      expect(rootNode.children.elementAt(5).metaData, isNull);
      expect(rootNode.children.elementAt(6).name, equals('Bein3Re'));
      expect(rootNode.children.elementAt(6).transformation, matrix4MoreOrLessEquals(Matrix4(1, 0, 0, 0, 0 ,1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)));
      expect(rootNode.children.elementAt(6).parent, isNotNull);
      expect(rootNode.children.elementAt(6).children.length, isZero);
      expect(rootNode.children.elementAt(6).meshes, equals([6]));
      expect(rootNode.children.elementAt(6).metaData, isNull);
      expect(rootNode.children.elementAt(7).name, equals('Bein3Li'));
      expect(rootNode.children.elementAt(7).transformation, matrix4MoreOrLessEquals(Matrix4(1, 0, 0, 0, 0 ,1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)));
      expect(rootNode.children.elementAt(7).parent, isNotNull);
      expect(rootNode.children.elementAt(7).children.length, isZero);
      expect(rootNode.children.elementAt(7).meshes, equals([7]));
      expect(rootNode.children.elementAt(7).metaData, isNull);
      expect(rootNode.children.elementAt(8).name, equals('Bein4Re'));
      expect(rootNode.children.elementAt(8).transformation, matrix4MoreOrLessEquals(Matrix4(1, 0, 0, 0, 0 ,1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)));
      expect(rootNode.children.elementAt(8).parent, isNotNull);
      expect(rootNode.children.elementAt(8).children.length, isZero);
      expect(rootNode.children.elementAt(8).meshes, equals([8]));
      expect(rootNode.children.elementAt(8).metaData, isNull);
      expect(rootNode.children.elementAt(9).name, equals('Bein4Li'));
      expect(rootNode.children.elementAt(9).transformation, matrix4MoreOrLessEquals(Matrix4(1, 0, 0, 0, 0 ,1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)));
      expect(rootNode.children.elementAt(9).parent, isNotNull);
      expect(rootNode.children.elementAt(9).children.length, isZero);
      expect(rootNode.children.elementAt(9).meshes, equals([9]));
      expect(rootNode.children.elementAt(9).metaData, isNull);
      expect(rootNode.children.elementAt(10).name, equals('Zahn'));
      expect(rootNode.children.elementAt(10).transformation, matrix4MoreOrLessEquals(Matrix4(1, 0, 0, 0, 0 ,1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)));
      expect(rootNode.children.elementAt(10).parent, isNotNull);
      expect(rootNode.children.elementAt(10).children.length, isZero);
      expect(rootNode.children.elementAt(10).meshes, equals([10]));
      expect(rootNode.children.elementAt(10).metaData, isNull);
      expect(rootNode.children.elementAt(11).name, equals('klZahn'));
      expect(rootNode.children.elementAt(11).transformation, matrix4MoreOrLessEquals(Matrix4(1, 0, 0, 0, 0 ,1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)));
      expect(rootNode.children.elementAt(11).parent, isNotNull);
      expect(rootNode.children.elementAt(11).children.length, isZero);
      expect(rootNode.children.elementAt(11).meshes, equals([11]));
      expect(rootNode.children.elementAt(11).metaData, isNull);
      expect(rootNode.children.elementAt(12).name, equals('Kopf'));
      expect(rootNode.children.elementAt(12).transformation, matrix4MoreOrLessEquals(Matrix4(1, 0, 0, 0, 0 ,1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)));
      expect(rootNode.children.elementAt(12).parent, isNotNull);
      expect(rootNode.children.elementAt(12).children.length, isZero);
      expect(rootNode.children.elementAt(12).meshes, equals([12]));
      expect(rootNode.children.elementAt(12).metaData, isNull);
      expect(rootNode.children.elementAt(13).name, equals('Brust'));
      expect(rootNode.children.elementAt(13).transformation, matrix4MoreOrLessEquals(Matrix4(1, 0, 0, 0, 0 ,1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)));
      expect(rootNode.children.elementAt(13).parent, isNotNull);
      expect(rootNode.children.elementAt(13).children.length, isZero);
      expect(rootNode.children.elementAt(13).meshes, equals([13]));
      expect(rootNode.children.elementAt(13).metaData, isNull);
      expect(rootNode.children.elementAt(14).name, equals('Kopf2'));
      expect(rootNode.children.elementAt(14).transformation, matrix4MoreOrLessEquals(Matrix4(1, 0, 0, 0, 0 ,1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)));
      expect(rootNode.children.elementAt(14).parent, isNotNull);
      expect(rootNode.children.elementAt(14).children.length, isZero);
      expect(rootNode.children.elementAt(14).meshes, equals([14]));
      expect(rootNode.children.elementAt(14).metaData, isNull);
      expect(rootNode.children.elementAt(15).name, equals('Zahn2'));
      expect(rootNode.children.elementAt(15).transformation, matrix4MoreOrLessEquals(Matrix4(1, 0, 0, 0, 0 ,1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)));
      expect(rootNode.children.elementAt(15).parent, isNotNull);
      expect(rootNode.children.elementAt(15).children.length, isZero);
      expect(rootNode.children.elementAt(15).meshes, equals([15]));
      expect(rootNode.children.elementAt(15).metaData, isNull);
      expect(rootNode.children.elementAt(16).name, equals('klZahn2'));
      expect(rootNode.children.elementAt(16).transformation, matrix4MoreOrLessEquals(Matrix4(1, 0, 0, 0, 0 ,1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)));
      expect(rootNode.children.elementAt(16).parent, isNotNull);
      expect(rootNode.children.elementAt(16).children.length, isZero);
      expect(rootNode.children.elementAt(16).meshes, equals([16]));
      expect(rootNode.children.elementAt(16).metaData, isNull);
      expect(rootNode.children.elementAt(17).name, equals('Auge'));
      expect(rootNode.children.elementAt(17).transformation, matrix4MoreOrLessEquals(Matrix4(1, 0, 0, 0, 0 ,1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)));
      expect(rootNode.children.elementAt(17).parent, isNotNull);
      expect(rootNode.children.elementAt(17).children.length, isZero);
      expect(rootNode.children.elementAt(17).meshes, equals([17]));
      expect(rootNode.children.elementAt(17).metaData, isNull);
      expect(rootNode.children.elementAt(18).name, equals('Duplicate05'));
      expect(rootNode.children.elementAt(18).transformation, matrix4MoreOrLessEquals(Matrix4(1, 0, 0, 0, 0 ,1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)));
      expect(rootNode.children.elementAt(18).parent, isNotNull);
      expect(rootNode.children.elementAt(18).children.length, isZero);
      expect(rootNode.children.elementAt(18).meshes, equals([18]));
      expect(rootNode.children.elementAt(18).metaData, isNull);
      expect(rootNode.meshes, equals([]));
      expect(rootNode.metaData, isNull);
    });

  });

}
