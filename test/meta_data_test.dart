import 'dart:ffi';
import 'dart:typed_data';
import 'package:ffi/ffi.dart';
import 'package:test/test.dart';
import '../lib/assimp.dart';
import '../lib/src/bindings.dart';
import 'test_utils.dart';

// DO NOT EDIT (generated by tool/testgen)

void main() {
  prepareTest();

  test('null', () {
    expect(MetaData.fromNative(null), isNull);
  });

  test('size', () {
    expect(sizeOf<aiMetadata>(), equals(24));
  });

  test('size', () {
    MetaData a = MetaData.fromNative(allocate<aiMetadata>());
    MetaData b = MetaData.fromNative(allocate<aiMetadata>());
    MetaData aa = MetaData.fromNative(a.ptr);
    MetaData bb = MetaData.fromNative(b.ptr);
    expect(a, equals(a));
    expect(a, equals(aa));
    expect(b, equals(b));
    expect(b, equals(bb));
    expect(a, isNot(equals(b)));
    expect(a, isNot(equals(bb)));
    expect(b, isNot(equals(a)));
    expect(b, isNot(equals(aa)));
  });

  test('toString', () {
    expect(MetaData.fromNative(allocate<aiMetadata>()).toString(), matches(r'MetaData\(Pointer<aiMetadata>: address=0x[0-f]+\)'));
  });

  test('3mf', () {
    testMetaData('3mf/box.3mf', (metaData) {
    });
    testMetaData('3mf/spider.3mf', (metaData) {
    });
  });

  test('fbx', () {
    testMetaData('fbx/huesitos.fbx', (metaData) {
      expect(metaData.keys.length, equals(15));
      expect(metaData.values.length, equals(15));
      expect(metaData.properties.length, equals(15));
      expect(metaData.keys.elementAt(0), equals('UpAxis'));
      expect(metaData.values.elementAt(0).runtimeType, int);
      expect(metaData.values.elementAt(0), equals(1));
      expect(metaData.keys.elementAt(1), equals('UpAxisSign'));
      expect(metaData.values.elementAt(1).runtimeType, int);
      expect(metaData.values.elementAt(1), equals(1));
      expect(metaData.keys.elementAt(2), equals('FrontAxis'));
      expect(metaData.values.elementAt(2).runtimeType, int);
      expect(metaData.values.elementAt(2), equals(2));
      expect(metaData.keys.elementAt(3), equals('FrontAxisSign'));
      expect(metaData.values.elementAt(3).runtimeType, int);
      expect(metaData.values.elementAt(3), equals(1));
      expect(metaData.keys.elementAt(4), equals('CoordAxis'));
      expect(metaData.values.elementAt(4).runtimeType, int);
      expect(metaData.values.elementAt(4), isZero);
      expect(metaData.keys.elementAt(5), equals('CoordAxisSign'));
      expect(metaData.values.elementAt(5).runtimeType, int);
      expect(metaData.values.elementAt(5), equals(1));
      expect(metaData.keys.elementAt(6), equals('OriginalUpAxis'));
      expect(metaData.values.elementAt(6).runtimeType, int);
      expect(metaData.values.elementAt(6), equals(-1));
      expect(metaData.keys.elementAt(7), equals('OriginalUpAxisSign'));
      expect(metaData.values.elementAt(7).runtimeType, int);
      expect(metaData.values.elementAt(7), equals(1));
      expect(metaData.keys.elementAt(8), equals('UnitScaleFactor'));
      expect(metaData.values.elementAt(8).runtimeType, double);
      expect(metaData.values.elementAt(8), moreOrLessEquals(1));
      expect(metaData.keys.elementAt(9), equals('OriginalUnitScaleFactor'));
      expect(metaData.values.elementAt(9).runtimeType, double);
      expect(metaData.values.elementAt(9), moreOrLessEquals(1));
      expect(metaData.keys.elementAt(10), equals('AmbientColor'));
      expect(metaData.values.elementAt(10).runtimeType, Vector3);
      expect(metaData.values.elementAt(10), vector3MoreOrLessEquals(Vector3(0, 0, 0)));
      expect(metaData.keys.elementAt(11), equals('FrameRate'));
      expect(metaData.values.elementAt(11).runtimeType, int);
      expect(metaData.values.elementAt(11), equals(10));
      expect(metaData.keys.elementAt(12), equals('TimeSpanStart'));
      expect(metaData.values.elementAt(12).runtimeType, int);
      expect(metaData.values.elementAt(12), isZero);
      expect(metaData.keys.elementAt(13), equals('TimeSpanStop'));
      expect(metaData.values.elementAt(13).runtimeType, int);
      expect(metaData.values.elementAt(13), isZero);
      expect(metaData.keys.elementAt(14), equals('CustomFrameRate'));
      expect(metaData.values.elementAt(14).runtimeType, double);
      expect(metaData.values.elementAt(14), moreOrLessEquals(25));
    });
  });

  test('obj', () {
    testMetaData('Obj/Spider/spider.obj', (metaData) {
    });
  });

}
